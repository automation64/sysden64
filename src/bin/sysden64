#!/usr/bin/env bash
#######################################
# Copyright [2024] [serdigital64@gmail.com]
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#######################################

#
# Imports
#

# Automation64 / Root path
declare SYSDEN64_PATH_AT64='/opt'
[[ ! -d "$SYSDEN64_PATH_AT64/bl64" && -d "${HOME}/at64/bl64" ]] && SYSDEN64_PATH_AT64="${HOME}/at64"
# SysDen64 / Installation path
declare SYSDEN64_PATH_ROOT="${SYSDEN64_PATH_ROOT:-${SYSDEN64_PATH_AT64}/sysden64}"

# BashLib64 / Installation path
declare SYSDEN64_PATH_BL64="${SYSDEN64_PATH_BL64:-${SYSDEN64_PATH_AT64}/bl64}"
# shellcheck source-path=SCRIPTDIR/../../lib/bl64
source "${SYSDEN64_PATH_BL64}/bashlib64-module-tm.bash" &&
  source "${SYSDEN64_PATH_BL64}/bashlib64-module-api.bash" &&
  source "${SYSDEN64_PATH_BL64}/bashlib64-module-ui.bash" &&
  source "${SYSDEN64_PATH_BL64}/bashlib64-module-xsv.bash" &&
  source "${SYSDEN64_PATH_BL64}/bashlib64-module-bsh.bash" &&
  source "${SYSDEN64_PATH_BL64}/bashlib64-module-vcs.bash" &&
  source "${SYSDEN64_PATH_BL64}/bashlib64-module-rxtx.bash" &&
  source "${SYSDEN64_PATH_BL64}/bashlib64-module-fmt.bash" &&
  source "${SYSDEN64_PATH_BL64}/bashlib64-module-txt.bash" &&
  source "${SYSDEN64_PATH_BL64}/bashlib64-module-fs.bash" &&
  source "${SYSDEN64_PATH_BL64}/bashlib64-module-rnd.bash" &&
  source "${SYSDEN64_PATH_BL64}/bashlib64-module-iam.bash" &&
  source "${SYSDEN64_PATH_BL64}/bashlib64-core.bash" || exit $?

#
# Globals
#

# SysDen64 / Version
readonly SYSDEN64_VERSION='4.3.0'
# SysDen64 / Application configuration setup modules
declare SYSDEN64_PATH_LIB="${SYSDEN64_PATH_LIB:-}"
# SysDen64 / Application configuration boilerplates
declare SYSDEN64_PATH_ETC="${SYSDEN64_PATH_ETC:-}"
# SysDen64 / Shell modules repository
# shellcheck disable=SC2034
readonly SYSDEN64_PATH_SHELLENV='.env.d'
# SysDen64 / Version marker
declare SYSDEN64_PATH_TAG_VERSION='.sysden64'
# SysDen64 / Current profile marker
declare SYSDEN64_PATH_TAG_PROFILE='.sysden64-profile'
# SysDen64 / Current lab container profile marker
declare SYSDEN64_PATH_TAG_LAB='.sysden64-lab'
# SysDen64 / External repositories
readonly SYSDEN64_PATH_REPOS='repos'
# SysDen64 / Home config Backup
declare SYSDEN64_PATH_BACKUP='backup'
# SysDen64 / Home config Backup
declare SYSDEN64_PATH_LOCKS='locks'
# SysDen64 / Shared configs
declare SYSDEN64_PATH_SHARED='etc/shared'
# SysDen64 / Dedicated configs
declare SYSDEN64_PATH_DEDICATED='etc/prof'
# SysDen64 / SD64 prefix
readonly SYSDEN64_PREFIX_SD64='sd64'
# SysDen64 / Lock suffix
readonly SYSDEN64_SUFFIX_NOTUPGRADE='.skip_upgrade'

# DevBin64 / Installation path
declare SYSDEN64_PATH_DEVBIN64="${SYSDEN64_PATH_DEVBIN64:-${SYSDEN64_PATH_AT64}/devbin64}"
# DevBin64 / Bootstrap path
readonly SYSDEN64_CMD_DEVBIN64_BOOTSTRAP="${SYSDEN64_PATH_DEVBIN64}/bin/dev-bootstrap"
# DevBin64 / Env Set script
declare SYSDEN64_CMD_DEVBIN64_SET='bin/dev-set'
# DevBin64 / Profile set script
declare SYSDEN64_CMD_DEVBIN64_PROFILE='bin/dev-profile-create'
# DevBin64 / Modules File
readonly SYSDEN64_FILE_DEVBIN64_MODULE='.devbin64-modules'
# DevBin64 / Modules
declare SYSDEN64_DEVBIN64_MODULE=''
SYSDEN64_DEVBIN64_MODULE+='bash\n'
SYSDEN64_DEVBIN64_MODULE+='git\n'
SYSDEN64_DEVBIN64_MODULE+='github\n'
SYSDEN64_DEVBIN64_MODULE+='gitleaks\n'
SYSDEN64_DEVBIN64_MODULE+='shellcheck\n'
SYSDEN64_DEVBIN64_MODULE+='sysden64\n'
# DevBin64 / Target profile
export DEV_PROFILE=''

#
# SysDen64 / Modules
#

declare SYSDEN64_MODULES_CUSTOM='custom'
declare SYSDEN64_MODULES_BASE=''
SYSDEN64_MODULES_BASE+=' env' # Must be the first module in the list
SYSDEN64_MODULES_BASE+=' bash'
SYSDEN64_MODULES_BASE+=' fish'
SYSDEN64_MODULES_BASE+=' zsh'
SYSDEN64_MODULES_BASE+=' xdg'
SYSDEN64_MODULES_BASE+=" ${SYSDEN64_MODULES_CUSTOM}"

declare SYSDEN64_MODULES_PROFILE='profile'
declare SYSDEN64_MODULES_DEDICATED_DEFAULT=''
SYSDEN64_MODULES_DEDICATED_DEFAULT+=" ${SYSDEN64_MODULES_PROFILE}"
SYSDEN64_MODULES_DEDICATED_DEFAULT+=' awscli'
SYSDEN64_MODULES_DEDICATED_DEFAULT+=' docker'
SYSDEN64_MODULES_DEDICATED_DEFAULT+=' gcloud'
SYSDEN64_MODULES_DEDICATED_DEFAULT+=' gpg'
SYSDEN64_MODULES_DEDICATED_DEFAULT+=' kubectl'
SYSDEN64_MODULES_DEDICATED_DEFAULT+=' ssh'

declare SYSDEN64_MODULES_SHARED_DEFAULT=''
SYSDEN64_MODULES_SHARED_DEFAULT+=' alacritty'
SYSDEN64_MODULES_SHARED_DEFAULT+=' ansible'
SYSDEN64_MODULES_SHARED_DEFAULT+=' bat'
SYSDEN64_MODULES_SHARED_DEFAULT+=' btop'
SYSDEN64_MODULES_SHARED_DEFAULT+=' cursor'
SYSDEN64_MODULES_SHARED_DEFAULT+=' delta'
SYSDEN64_MODULES_SHARED_DEFAULT+=' duf'
SYSDEN64_MODULES_SHARED_DEFAULT+=' eza'
SYSDEN64_MODULES_SHARED_DEFAULT+=' fd'
SYSDEN64_MODULES_SHARED_DEFAULT+=' git'
SYSDEN64_MODULES_SHARED_DEFAULT+=' github'
SYSDEN64_MODULES_SHARED_DEFAULT+=' helix'
SYSDEN64_MODULES_SHARED_DEFAULT+=' homebrew'
SYSDEN64_MODULES_SHARED_DEFAULT+=' hwatch'
SYSDEN64_MODULES_SHARED_DEFAULT+=' java'
SYSDEN64_MODULES_SHARED_DEFAULT+=' keepassx'
SYSDEN64_MODULES_SHARED_DEFAULT+=' kitty'
SYSDEN64_MODULES_SHARED_DEFAULT+=' lnav'
SYSDEN64_MODULES_SHARED_DEFAULT+=' libpq'
SYSDEN64_MODULES_SHARED_DEFAULT+=' lsd'
SYSDEN64_MODULES_SHARED_DEFAULT+=' mc'
SYSDEN64_MODULES_SHARED_DEFAULT+=' nodejs'
SYSDEN64_MODULES_SHARED_DEFAULT+=' nvim'
SYSDEN64_MODULES_SHARED_DEFAULT+=' nvm'
SYSDEN64_MODULES_SHARED_DEFAULT+=' omz'
SYSDEN64_MODULES_SHARED_DEFAULT+=' openssl'
SYSDEN64_MODULES_SHARED_DEFAULT+=' p10k'
SYSDEN64_MODULES_SHARED_DEFAULT+=' python'
SYSDEN64_MODULES_SHARED_DEFAULT+=' rd'
SYSDEN64_MODULES_SHARED_DEFAULT+=' ripgrep'
SYSDEN64_MODULES_SHARED_DEFAULT+=' starship'
SYSDEN64_MODULES_SHARED_DEFAULT+=' terraform'
SYSDEN64_MODULES_SHARED_DEFAULT+=' tmux'
SYSDEN64_MODULES_SHARED_DEFAULT+=' vscode'
SYSDEN64_MODULES_SHARED_DEFAULT+=' zellij'
SYSDEN64_MODULES_SHARED_DEFAULT+=' zoxide'

# Optional # SYSDEN64_MODULE_LIST_TOOLS+='eza '

declare SYSDEN64_MODULES_SHARED="${SYSDEN64_MODULES_SHARED:-$SYSDEN64_MODULES_SHARED_DEFAULT}"
declare SYSDEN64_MODULES_DEDICATED="${SYSDEN64_MODULES_DEDICATED:-$SYSDEN64_MODULES_DEDICATED_DEFAULT}"

# shellcheck disable=SC2034
{
  # SysDen64 / Configuration deploy marker
  declare SYSDEN64_ACTION_DEPLOY="$BL64_VAR_OFF"
  # SysDen64 / Profile switch marker
  declare SYSDEN64_ACTION_SWITCH="$BL64_VAR_OFF"
  # SysDen64 / Module upgrade marker
  declare SYSDEN64_ACTION_SYNC="$BL64_VAR_OFF"
  # SysDen64 / Lab Container marker
  declare SYSDEN64_FLAG_LAB="$BL64_VAR_OFF"
  # SysDen64 / Flag for devbin repo
  declare SYSDEN64_FLAG_USER_WIDE='OFF'

  # SysDen64 / Common messages
  readonly SYSDEN64_TXT_NOT_DETECTED='tool not detected. No further action taken'
  readonly SYSDEN64_TXT_WATERMARK='# Warning: configuration file generated by SysDen64.'
  readonly SYSDEN64_MODULE_TYPE_SHARED='S'
  readonly SYSDEN64_MODULE_TYPE_DEDICATED='D'

  # DevBin64 / Base paths
  declare DEV_PATH_DOCS=''
  declare DEV_PATH_SRC=''
  declare DEV_PATH_ROOT=''
  declare DEV_PATH_PROF_LOGS=''
  declare DEV_PATH_PROF_VAULT=''
  declare DEV_PATH_PROF_TMP=''
  declare DEV_PATH_PROF_ETC=''
  declare DEV_PATH_PROF_VAR=''
}

#
# Internal variables
#

declare SYSDEN64_COMMAND=''
declare SYSDEN64_DEBUG="$BL64_DBG_TARGET_NONE"
declare SYSDEN64_OPTION=''
declare SYSDEN64_VERBOSE="$BL64_MSG_VERBOSE_APP"
declare SYSDEN64_HOME="$HOME"
declare SYSDEN64_REPOSITORY="${SYSDEN64_HOME}/${SYSDEN64_PREFIX_SD64}"
declare SYSDEN64_PROFILE='default'
declare SYSDEN64_MODULE=''

#
# Module Functions
#

function module_setup_env() {
  bl64_dbg_app_show_function "$@"
  local home="$1"
  local source="$2"
  local module_type="${3:-$SYSDEN64_MODULE_TYPE_SHARED}"
  local model="${4:-}"

  bl64_check_parameter 'home' &&
    bl64_check_parameter 'home' || return $?

  if [[ "$module_type" == "$SYSDEN64_MODULE_TYPE_DEDICATED" ]]; then
    if bl64_lib_flag_is_enabled "$SYSDEN64_ACTION_SWITCH"; then
      bl64_dbg_app_show_comments 'switching profile. Allow sync if new profile'
      [[ -n "$model" && -d "${DEV_PATH_PROF_VAULT}/${model}" ]] && return 0
    fi
  fi

  if [[ -d "${source}/${SYSDEN64_PATH_SHELLENV}/${BL64_OS_TYPE}" ]]; then
    source="${source}/${SYSDEN64_PATH_SHELLENV}/${BL64_OS_TYPE}"
  else
    source="${source}/${SYSDEN64_PATH_SHELLENV}"
    bl64_dbg_app_show_comments 'Allow empty env.d directory'
    [[ -z "$(
      shopt -s nullglob
      echo "${source}"/??_*_*.*
    )" ]] && return 0
  fi
  bl64_dbg_app_show_info "source location: [${source}]"

  bl64_msg_show_task "setup environment variables (${home}/${SYSDEN64_PATH_SHELLENV})"
  bl64_fs_path_copy \
    "$BL64_VAR_DEFAULT" \
    "$BL64_VAR_DEFAULT" \
    "$BL64_VAR_DEFAULT" \
    "$BL64_VAR_DEFAULT" \
    "${home}/${SYSDEN64_PATH_SHELLENV}" \
    "${source}"/??_*_*.*
}

function module_config_backup() {
  bl64_dbg_app_show_function "$@"
  local model="$1"
  local target=''
  local source=''

  shift
  bl64_check_parameter 'model' || return $?

  if bl64_lib_flag_is_enabled "$SYSDEN64_ACTION_SWITCH"; then
    bl64_dbg_app_show_comments 'Switching profiles. No backup required'
    return 0
  fi

  target="${SYSDEN64_PATH_BACKUP}/${model}"
  for source in "$@"; do
    if [[ -e "$source" ]]; then
      bl64_msg_show_task "backup current configuration (${source} -> ${target})"
      bl64_fs_dir_create \
        "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" \
        "$SYSDEN64_PATH_BACKUP" \
        "$target" &&
        bl64_fs_run_mv \
          "$BL64_FS_SET_MV_FORCE" \
          "$source" \
          "$target" ||
        return $?
    fi
  done
}

function module_check_type() {
  bl64_dbg_app_show_function "$@"
  local module_type="$1"
  bl64_check_parameter 'module_type' || return $?
  if [[ "$module_type" != "$SYSDEN64_MODULE_TYPE_DEDICATED" &&
    "$module_type" != "$SYSDEN64_MODULE_TYPE_SHARED" ]]; then
    bl64_msg_show_error "invalid module type (${module_type})"
    return $BL64_LIB_ERROR_PARAMETER_INVALID
  fi
}

function module_set_model() {
  local module_type="$1"
  local module="$2"
  module_check_type "$module_type" ||
    return $?
  if bl64_lib_flag_is_enabled "$SYSDEN64_FLAG_USER_WIDE"; then
    if [[ "$module_type" == "$SYSDEN64_MODULE_TYPE_DEDICATED" ]]; then
      if [[ -d "${SYSDEN64_PATH_DEDICATED}/${SYSDEN64_PROFILE}/${module}" ]]; then
        echo "${SYSDEN64_PATH_DEDICATED}/${SYSDEN64_PROFILE}/${module}"
      else
        echo "$SYSDEN64_PATH_ETC/$module"
      fi
    elif [[ "$module_type" == "$SYSDEN64_MODULE_TYPE_SHARED" ]]; then
      echo "${SYSDEN64_PATH_SHARED}/${module}"
    fi
  else
    echo "$SYSDEN64_PATH_ETC/$module"
  fi
}

function module_sync_is_requested() {
  bl64_dbg_app_show_function "$@"
  local module_type="$1"
  local vault="${2:-}"

  module_check_type "$module_type" ||
    return $?

  if [[ "$module_type" == "$SYSDEN64_MODULE_TYPE_DEDICATED" ]]; then
    if bl64_lib_flag_is_enabled "$SYSDEN64_ACTION_SWITCH"; then
      bl64_dbg_app_show_comments 'switching profile. Allow sync if new profile'
      [[ ! -d "$vault" ]]
      return $?
    fi
    bl64_dbg_app_show_comments 'allow sync if sync or user-wide deploy is requested'
    return 0
  elif [[ "$module_type" == "$SYSDEN64_MODULE_TYPE_SHARED" ]]; then
    bl64_dbg_app_show_comments 'shared module. Always allow sync'
    return 1
  fi
}

#
# Main Functions
#

function locks_repository_create() {
  bl64_dbg_app_show_function
  bl64_fs_dir_create \
    "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" \
    "$SYSDEN64_PATH_LOCKS"
}

function shell_reload_exec() {
  bl64_dbg_app_show_function
  if bl64_ui_ask_yesno 'restart current shell for activating updated environment variable values?. Notice that any other terminal window must be manually restarted'; then
    exec "$SHELL" -l
  else
    bl64_msg_show_warning 'automatic reload cancelled. Notice that all shell terminals still need to be manually restarted for activating updated environment variable values'
  fi
}

function shell_reload_warning() {
  bl64_dbg_app_show_function
  bl64_msg_show_warning 'All shell terminals must be manually restarted in order to activate updated environment variable values'
}

function backup_repository_create() {
  bl64_dbg_app_show_function
  local current_backup=''
  bl64_msg_show_task "create configuration backup repository (${SYSDEN64_PATH_BACKUP})"
  current_backup="${SYSDEN64_PATH_BACKUP}/$(bl64_tm_create_timestamp_file)" &&
    bl64_fs_dir_create \
      "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" \
      "$SYSDEN64_PATH_BACKUP" \
      "$current_backup" &&
    SYSDEN64_PATH_BACKUP="$current_backup"
}

function module_shared_upgrade() {
  bl64_dbg_app_show_function
  local module=''

  bl64_dbg_app_show_info "upgrade shared configuration modules (${SYSDEN64_PATH_SHARED})"
  bl64_check_directory "$SYSDEN64_PATH_SHARED" ||
    return $?

  # shellcheck disable=SC2164
  for module in $SYSDEN64_MODULES_BASE $SYSDEN64_MODULES_SHARED; do
    module_verify_required "$module" || continue
    module_single_upgrade "$SYSDEN64_PATH_SHARED" "$module" ||
      return $?
  done
}

function profile_list_get() {
  cd "$SYSDEN64_PATH_DEDICATED" &&
    bl64_bsh_pattern_match_file '*' &&
    return 0
  bl64_msg_show_error "Unable to list profiles in ${SYSDEN64_PATH_DEDICATED}"
  return $BL64_LIB_ERROR_TASK_FAILED
}

function module_single_upgrade() {
  bl64_dbg_app_show_function "$@"
  local path="$1"
  local module="$2"

  if bl64_lib_flag_is_enabled "$SYSDEN64_ACTION_SWITCH"; then
    bl64_dbg_app_show_info "skip profile switch if module exists (${path}/${module})"
    [[ -d "${path}/${module}" ]] && return 0
  elif [[ "$module" == "$SYSDEN64_MODULES_CUSTOM" ]]; then
    bl64_dbg_app_show_info "skip custom module upgrade if it exists (${path}/${module})"
    [[ -d "${path}/${module}" ]] && return 0
  elif [[ "$module" == "$SYSDEN64_MODULES_PROFILE" ]]; then
    bl64_dbg_app_show_info "skip profile module upgrade if it exists (${path}/${module})"
    [[ -d "${path}/${module}" ]] && return 0
  elif [[ -f "${SYSDEN64_PATH_LOCKS}/${module}${SYSDEN64_SUFFIX_NOTUPGRADE}" ]]; then
    bl64_dbg_app_show_info "skip module upgrade if locked from upgrade (${path}/${module})"
    [[ -d "${path}/${module}" ]] && return 0
  else
    bl64_fs_path_remove "${path}/${module}"
  fi
  bl64_msg_show_task "upgrade module (${module})"
  bl64_fs_path_copy \
    "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" \
    "$path" \
    "${SYSDEN64_PATH_ETC}/${module}" ||
    return $?
}

function module_dedicated_upgrade() {
  bl64_dbg_app_show_function "$@"
  local profile="${1:-}"
  local module=''
  local profile_list=''

  bl64_dbg_app_show_info "upgrade dedicated configuration modules (${SYSDEN64_PATH_DEDICATED})"
  bl64_check_parameter 'profile' &&
    bl64_check_directory "$SYSDEN64_PATH_SHARED" ||
    return $?

  if [[ "$profile" = 'all' ]]; then
    profile_list="$(profile_list_get)" ||
      return $BL64_LIB_ERROR_TASK_FAILED
  else
    profile_list="$profile"
    profile=''
  fi

  # shellcheck disable=SC2164
  for module in $SYSDEN64_MODULES_PROFILE; do
    module_verify_required "$module" || continue
    for profile in $profile_list; do
      profile="${SYSDEN64_PATH_DEDICATED}/${profile}"
      module_single_upgrade "$profile" "$module" ||
        return $?
    done
  done
}

function module_verify_required() {
  bl64_dbg_app_show_function "$@"
  local module="$1"
  if [[ -n "$SYSDEN64_MODULE" ]]; then
    if [[ "$module" != "$SYSDEN64_MODULE" ]]; then
      bl64_dbg_app_show_info "module not requested, skip it (${module})"
      return 1
    fi
  fi
  return 0
}

function repository_check_init() {
  bl64_dbg_app_show_function
  if [[ ! -s "$SYSDEN64_PATH_TAG_VERSION" ]]; then
    bl64_msg_show_error 'SysDen64 needs to be initialized. Please deploy a system-wide or user-wide configuration first.'
    return 1
  fi
}

function repository_check_user() {
  bl64_dbg_app_show_function
  if [[ ! -d "$SYSDEN64_REPOSITORY" ]]; then
    bl64_msg_show_error 'SysDen64 needs to be initialized. Please deploy a user-wide configuration first.'
    return 1
  fi
}

function version_register() {
  bl64_dbg_app_show_function
  bl64_msg_show_task "register sysden64 version (${SYSDEN64_PATH_TAG_VERSION})"
  echo "$SYSDEN64_VERSION" >"$SYSDEN64_PATH_TAG_VERSION"
}

function module_shared_setup() {
  bl64_dbg_app_show_function "$@"
  local home="$1"
  local module=''
  local module_source=''

  bl64_dbg_app_show_comments 'configure base modules'
  for module in $SYSDEN64_MODULES_BASE; do
    module_verify_required "$module" || continue
    module_source="${SYSDEN64_PATH_LIB}/${module}.bash"
    bl64_dbg_app_show_info "module source location: [${module_source}]"
    # shellcheck disable=SC1090
    bl64_check_file "$module_source" &&
      source "$module_source" &&
      "module_${module}_setup" "$home" ||
      return $?
  done
  bl64_dbg_app_show_comments 'configure shared modules'
  for module in $SYSDEN64_MODULES_SHARED; do
    module_verify_required "$module" || continue
    module_source="${SYSDEN64_PATH_LIB}/${module}.bash"
    bl64_dbg_app_show_info "module source location: [${module_source}]"
    # shellcheck disable=SC1090
    bl64_check_file "$module_source" &&
      source "$module_source" &&
      "module_${module}_setup" "$home" ||
      return $?
  done
}

function module_dedicated_setup() {
  bl64_dbg_app_show_function "$@"
  local home="$1"
  local module=''
  local module_source=''

  bl64_dbg_app_show_comments 'configure dedicated modules'
  for module in $SYSDEN64_MODULES_DEDICATED; do
    module_verify_required "$module" || continue
    module_source="${SYSDEN64_PATH_LIB}/${module}.bash"
    bl64_dbg_app_show_info "module source location: [${module_source}]"
    # shellcheck disable=SC1090
    bl64_check_file "$module_source" &&
      source "$module_source" &&
      "module_${module}_setup" "$home" ||
      return $?
  done
}

function devbin64_setup() {
  bl64_dbg_app_show_function "$@"
  local home="$1"
  local repository="$2"
  local profile="$3"

  bl64_msg_show_phase 'populate configuration repository'
  bl64_msg_show_task "source environment (${repository} - ${profile})"
  DEV_PROFILE="$profile"
  unset DEV_PATH_ROOT
  # shellcheck disable=SC1090
  cd "$repository" &&
    source "$SYSDEN64_CMD_DEVBIN64_SET" ||
    return $?

  bl64_msg_show_task "set profile (${profile})"
  "$SYSDEN64_CMD_DEVBIN64_PROFILE" "$profile" ||
    return $?
  if bl64_lib_flag_is_enabled "$SYSDEN64_FLAG_LAB"; then
    echo "$profile" >"$SYSDEN64_PATH_TAG_LAB"
  else
    echo "$profile" >"$SYSDEN64_PATH_TAG_PROFILE"
  fi

  bl64_msg_show_task "create shared configuration store (${SYSDEN64_PATH_SHARED})"
  bl64_fs_dir_create \
    "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" \
    "$SYSDEN64_PATH_SHARED" ||
    return $?

  bl64_msg_show_task "create/update home links to profile (${profile})"
  # shellcheck disable=SC2154
  bl64_fs_symlink_create \
    "${DEV_PATH_DOCS}" "${home}/${SYSDEN64_PREFIX_SD64}docs" "$BL64_VAR_ON" &&
    bl64_fs_symlink_create \
      "${DEV_PATH_SRC}" "${home}/${SYSDEN64_PREFIX_SD64}src" "$BL64_VAR_ON" &&
    bl64_fs_symlink_create \
      "${DEV_PATH_ROOT}/${SYSDEN64_PATH_REPOS}" "${home}/${SYSDEN64_PREFIX_SD64}repos" "$BL64_VAR_ON" &&
    bl64_fs_symlink_create \
      "${DEV_PATH_PROF_LOGS}" "${home}/${SYSDEN64_PREFIX_SD64}logs" "$BL64_VAR_ON" &&
    bl64_fs_symlink_create \
      "${DEV_PATH_PROF_VAULT}" "${home}/${SYSDEN64_PREFIX_SD64}vault" "$BL64_VAR_ON" &&
    bl64_fs_symlink_create \
      "${DEV_PATH_PROF_TMP}" "${home}/${SYSDEN64_PREFIX_SD64}tmp" "$BL64_VAR_ON" &&
    bl64_fs_symlink_create \
      "${DEV_PATH_PROF_ETC}" "${home}/${SYSDEN64_PREFIX_SD64}etc" "$BL64_VAR_ON" &&
    bl64_fs_symlink_create \
      "${DEV_PATH_PROF_VAR}" "${home}/${SYSDEN64_PREFIX_SD64}var" "$BL64_VAR_ON"
}

function repository_create() {
  bl64_dbg_app_show_function "$@"
  local repository="$1"

  bl64_msg_show_task "create user-wide configuration repository (${repository})"
  # shellcheck disable=SC2059
  bl64_fs_dir_create \
    "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" \
    "$repository" \
    "${repository}/${SYSDEN64_PATH_REPOS}" &&
    bl64_fs_file_create "${repository}/${SYSDEN64_PATH_REPOS}/.gitkeep" &&
    cd "$repository" &&
    printf "$SYSDEN64_DEVBIN64_MODULE" >"${repository}/${SYSDEN64_FILE_DEVBIN64_MODULE}" &&
    "$SYSDEN64_CMD_DEVBIN64_BOOTSTRAP" &&
    create_user_wide_ignore "$repository"
}

function create_user_wide_ignore() {
  bl64_dbg_app_show_function "$@"
  local repository="$1"
  local path_gitignore="${repository}/.gitignore"

  if ! bl64_txt_search_line "$path_gitignore" '/var/prof/*/home'; then
    bl64_msg_show_task "update .gitignore to ignore home profiles (${path_gitignore})"
    bl64_txt_run_sed -i"$BL64_LIB_SUFFIX_BACKUP" \
      '/# Keep placeholder for empty directories/i\
/var/prof/*/home\
/repos/*\
' "$path_gitignore" ||
      return $?
    bl64_fs_path_remove "${path_gitignore}${BL64_LIB_SUFFIX_BACKUP}"
  fi
}

function system_wide_create() {
  bl64_dbg_app_show_function "$@"
  local home="$1"

  if [[ -s "$SYSDEN64_PATH_TAG_VERSION" ]]; then
    bl64_msg_show_warning 'The system-wide configuration was already deployed. Use the sync (-u) option to refresh the configuration.'
    return 0
  fi
  backup_repository_create &&
    module_shared_setup "$home" &&
    module_dedicated_setup "$home" &&
    version_register &&
    shell_reload_warning
}

function user_wide_create() {
  bl64_dbg_app_show_function "$@"
  local home="$1"
  local repository="$2"
  local profile="$3"

  if [[ -d "$repository" ]]; then
    bl64_msg_show_warning 'The user-wide configuration was already deployed. Use the upgrade (-g) or sync (-u) options to maintain it.'
    return 0
  fi
  repository_create "$repository" &&
    devbin64_setup "$home" "$repository" "$profile" &&
    backup_repository_create &&
    locks_repository_create &&
    module_shared_upgrade &&
    module_dedicated_upgrade 'all' &&
    module_shared_setup "$home" &&
    module_dedicated_setup "$home" &&
    version_register &&
    shell_reload_warning
}

function profile_switch() {
  bl64_dbg_app_show_function "$@"
  local home="$1"
  local repository="$2"
  local profile="$3"
  local current=''

  repository_check_init &&
    repository_check_user ||
    return $?

  if ! bl64_lib_flag_is_enabled "$SYSDEN64_FLAG_LAB"; then
    if [[ -s "$SYSDEN64_PATH_TAG_PROFILE" ]]; then
      current="$(<"$SYSDEN64_PATH_TAG_PROFILE")" ||
        return $?
      if [[ "$current" == "$profile" ]]; then
        bl64_msg_show_warning "Profile already activated. No further action taken (${profile})"
        return 0
      fi
    fi
  else
    [[ -s "$SYSDEN64_PATH_TAG_LAB" ]] &&
      bl64_msg_show_warning 'Lab Container already configured, no further action taken' &&
      return 0
  fi

  devbin64_setup "$home" "$repository" "$profile" &&
    backup_repository_create &&
    module_dedicated_upgrade "$profile" &&
    module_dedicated_setup "$home" &&
    shell_reload_exec
}

function sysden64_upgrade() {
  bl64_dbg_app_show_function
  repository_check_init &&
    cd "$SYSDEN64_REPOSITORY" &&
    locks_repository_create &&
    module_shared_upgrade &&
    module_dedicated_upgrade 'all'
}

function configuration_sync() {
  bl64_dbg_app_show_function "$@"
  local home="$1"
  repository_check_init &&
    backup_repository_create &&
    module_shared_setup "$home" &&
    module_dedicated_setup "$home" &&
    shell_reload_exec
}

function lab_create() {
  bl64_dbg_app_show_function "$@"
  local home="$1"
  local repository="$2"
  local profile="$3"
  configuration_sync "$home" &&
    profile_switch "$home" "$repository" "$profile"
}

function lock_list() {
  bl64_dbg_app_show_function
  repository_check_init &&
    repository_check_user &&
    locks_repository_create &&
    cd "$SYSDEN64_PATH_LOCKS" &&
    bl64_bsh_pattern_match_file "*${SYSDEN64_SUFFIX_NOTUPGRADE}"
}

function profile_list() {
  bl64_dbg_app_show_function
  repository_check_init &&
    repository_check_user &&
    profile_list_get
}

function lock_disable() {
  bl64_dbg_app_show_function "$@"
  local module="$1"
  repository_check_init &&
    repository_check_user &&
    bl64_check_directory "${SYSDEN64_PATH_SHARED}/${module}" &&
    locks_repository_create &&
    cd "$SYSDEN64_PATH_LOCKS" &&
    bl64_fs_run_touch "$module${SYSDEN64_SUFFIX_NOTUPGRADE}"
}

function lock_enable() {
  bl64_dbg_app_show_fun
  local module="$1"
  repository_check_init &&
    repository_check_user &&
    bl64_check_directory "${SYSDEN64_PATH_SHARED}/${module}" &&
    locks_repository_create &&
    cd "$SYSDEN64_PATH_LOCKS" &&
    bl64_fs_file_remove "$module${SYSDEN64_SUFFIX_NOTUPGRADE}"
}

#######################################
# Initialize environment
#
# Arguments:
#   None
# Outputs:
#   Initializacion progress messages
# Returns:
#   0: initialization ok
#   >: failed to initialize
#######################################
function initialize() {
  bl64_dbg_app_show_function

  case "$SYSDEN64_COMMAND" in
    'system_wide_create')
      SYSDEN64_ACTION_DEPLOY="$BL64_VAR_ON"
      if [[ -d "$SYSDEN64_REPOSITORY" ]]; then
        bl64_msg_show_error "The system-wide feature can not be used when user-wide configuration is already deployed (${SYSDEN64_REPOSITORY})"
        # shellcheck disable=SC2086
        return $BL64_LIB_ERROR_TASK_FAILED
      fi
      ;;
    'profile_switch')
      SYSDEN64_FLAG_USER_WIDE='ON'
      # shellcheck disable=SC2034
      SYSDEN64_ACTION_SWITCH="$BL64_VAR_ON"
      ;;
    'lab_create')
      SYSDEN64_FLAG_LAB='ON'
      SYSDEN64_FLAG_USER_WIDE='ON'
      ;;
    'user_wide_create')
      SYSDEN64_ACTION_DEPLOY="$BL64_VAR_ON"
      SYSDEN64_FLAG_USER_WIDE='ON'
      bl64_check_command "$SYSDEN64_CMD_DEVBIN64_BOOTSTRAP" ||
        return $?
      ;;
    'configuration_sync')
      # shellcheck disable=SC2034
      SYSDEN64_ACTION_SYNC="$BL64_VAR_ON"
      [[ -d "$SYSDEN64_REPOSITORY" ]] && SYSDEN64_FLAG_USER_WIDE='ON'
      ;;
    'sysden64_upgrade')
      SYSDEN64_FLAG_USER_WIDE='ON'
      ;;
    'profile_list')
      SYSDEN64_FLAG_USER_WIDE='ON'
      ;;
    'lock_list')
      SYSDEN64_FLAG_USER_WIDE='ON'
      ;;
    'lock_disable' | 'lock_enable')
      SYSDEN64_FLAG_USER_WIDE='ON'
      bl64_check_parameter 'SYSDEN64_MODULE' ||
        { bl64_msg_help_show && return $BL64_LIB_ERROR_PARAMETER_MISSING; }
      if [[ "$SYSDEN64_MODULE" == "$SYSDEN64_MODULES_CUSTOM" || "$SYSDEN64_MODULE" == "$SYSDEN64_MODULES_PROFILE" ]]; then
        bl64_msg_show_info "This module is permanently excluded from upgrades. There is no need to disable/reenable it (module: ${module})"
        return 0
      fi
      ;;
    *)
      bl64_check_parameter 'SYSDEN64_COMMAND' ||
        { bl64_msg_help_show && return $BL64_LIB_ERROR_PARAMETER_MISSING; }
      ;;
  esac

  SYSDEN64_PATH_LIB="${SYSDEN64_PATH_LIB:-${SYSDEN64_PATH_ROOT}/lib}"
  SYSDEN64_PATH_ETC="${SYSDEN64_PATH_ETC:-${SYSDEN64_PATH_ROOT}/etc}"
  if bl64_lib_flag_is_enabled "$SYSDEN64_FLAG_USER_WIDE"; then
    SYSDEN64_PATH_TAG_VERSION="${SYSDEN64_REPOSITORY}/${SYSDEN64_PATH_TAG_VERSION}"
    SYSDEN64_PATH_BACKUP="${SYSDEN64_REPOSITORY}/tmp/${SYSDEN64_PATH_BACKUP}"
    SYSDEN64_PATH_LOCKS="${SYSDEN64_REPOSITORY}/var/${SYSDEN64_PATH_LOCKS}"
    SYSDEN64_PATH_SHARED="${SYSDEN64_REPOSITORY}/${SYSDEN64_PATH_SHARED}"
    SYSDEN64_PATH_DEDICATED="${SYSDEN64_REPOSITORY}/${SYSDEN64_PATH_DEDICATED}"
    SYSDEN64_PATH_TAG_PROFILE="${SYSDEN64_REPOSITORY}/${SYSDEN64_PATH_TAG_PROFILE}"
    SYSDEN64_PATH_TAG_LAB="${SYSDEN64_HOME}/${SYSDEN64_PATH_TAG_LAB}"
    SYSDEN64_CMD_DEVBIN64_SET="${SYSDEN64_REPOSITORY}/${SYSDEN64_CMD_DEVBIN64_SET}"
    SYSDEN64_CMD_DEVBIN64_PROFILE="${SYSDEN64_REPOSITORY}/${SYSDEN64_CMD_DEVBIN64_PROFILE}"
  else
    SYSDEN64_PATH_TAG_VERSION="${SYSDEN64_HOME}/${SYSDEN64_PATH_TAG_VERSION}"
    SYSDEN64_PATH_BACKUP="${SYSDEN64_HOME}/${SYSDEN64_PREFIX_SD64}-${SYSDEN64_PATH_BACKUP}"
    SYSDEN64_PATH_SHARED=''
    SYSDEN64_CMD_DEVBIN64_SET="${SYSDEN64_PATH_DEVBIN64}/${SYSDEN64_CMD_DEVBIN64_SET}"
    SYSDEN64_CMD_DEVBIN64_PROFILE="${SYSDEN64_PATH_DEVBIN64}/${SYSDEN64_CMD_DEVBIN64_PROFILE}"
    SYSDEN64_PROFILE=''
    bl64_check_directory "$SYSDEN64_PATH_ETC" &&
      bl64_check_directory "$SYSDEN64_PATH_LIB" ||
      return $?
  fi
  bl64_dbg_app_show_vars \
    'SYSDEN64_PATH_TAG_VERSION' \
    'SYSDEN64_CMD_DEVBIN64_SET' \
    'SYSDEN64_CMD_DEVBIN64_PROFILE' \
    'SYSDEN64_PATH_AT64' \
    'SYSDEN64_PATH_ROOT' \
    'SYSDEN64_PATH_BL64' \
    'SYSDEN64_PATH_LOCKS'
  bl64_msg_show_setup "$BL64_VAR_DEFAULT" \
    'SYSDEN64_VERSION' \
    'SYSDEN64_COMMAND' \
    'SYSDEN64_FLAG_USER_WIDE' \
    'SYSDEN64_MODULES_BASE' \
    'SYSDEN64_MODULES_SHARED' \
    'SYSDEN64_MODULES_DEDICATED' \
    'SYSDEN64_REPOSITORY' \
    'SYSDEN64_PROFILE' \
    'SYSDEN64_PATH_ETC' \
    'SYSDEN64_PATH_LIB' \
    'SYSDEN64_PATH_SHARED' \
    'SYSDEN64_PATH_DEDICATED' \
    'SYSDEN64_PATH_BACKUP'
}

#
# Main
#

bl64_lib_script_version_set '7.1.1'
bl64_msg_help_usage_set '<-s|-l|-c|-w|-u|-g|-d|-r|-k> [-o Home] [-i Repo] [-p Profile] [-m Module] [-V Verbose] [-D Debug] [-h]'
bl64_msg_help_about_set 'SysDen64 is an opinionated portable working environment for the IT nomad'
# shellcheck disable=SC2016
bl64_msg_help_parameters_set \
  'Configuration Repository Preparation
-s         : Prepare for user repository. Configurations will be stored in a user-level repository
-l         : Prepare for system repository. Configurations will be read from a system-level repository
-c         : Prepare for lab container. Configurations will be read from the host user-level repository

Configuration management
-u         : Apply configuration changes from the repository to the user home.

Profile management
-w         : Switch to the specified configuration profile. Requires the -p argument
-f         : List profiles

Modules management
-g         : Upgrade module definitions.
-d         : Disable upgrade for the module. Requires the -m argument
-r         : Reenable upgrade for the module. Requires the -m argument
-k         : List modules disabled for upgrade

Parameters
-o Home    : Set the full path to the users home directory. Defaults to $HOME
-i Repo    : Set the path to the configuration repository. Defaults to $HOME/sd64
-p Profile : Specify the configuration profile name. Required for -w. Defaults to default.
-m Module  : Module name. Required for -d and -r. Optional for -g and -u

Help
-h         : Show help
-V Verbose : Set verbosity level. Format: one of BL64_MSG_VERBOSE_*
-D Debug   : Enable debugging mode. Format: one of BL64_DBG_TARGET_*'

while getopts ':slcwugdrkfo:i:p:m:V:D:h' SYSDEN64_OPTION; do
  case "$SYSDEN64_OPTION" in
    s) SYSDEN64_COMMAND='user_wide_create' ;;
    l) SYSDEN64_COMMAND='system_wide_create' ;;
    c) SYSDEN64_COMMAND='lab_create' ;;
    u) SYSDEN64_COMMAND='configuration_sync' ;;
    w) SYSDEN64_COMMAND='profile_switch' ;;
    f) SYSDEN64_COMMAND='profile_list' ;;
    g) SYSDEN64_COMMAND='sysden64_upgrade' ;;
    d) SYSDEN64_COMMAND='lock_disable' ;;
    r) SYSDEN64_COMMAND='lock_enable' ;;
    k) SYSDEN64_COMMAND='lock_list' ;;
    o) SYSDEN64_HOME="$OPTARG" ;;
    i) SYSDEN64_REPOSITORY="$OPTARG" ;;
    p) SYSDEN64_PROFILE="$OPTARG" ;;
    m) SYSDEN64_MODULE="$OPTARG" ;;
    V) SYSDEN64_VERBOSE="$OPTARG" ;;
    D) SYSDEN64_DEBUG="$OPTARG" ;;
    h) bl64_msg_help_show && exit 0 ;;
    *) bl64_msg_help_show && exit 1 ;;
  esac
done
bl64_dbg_set_level "$SYSDEN64_DEBUG" && bl64_msg_set_level "$SYSDEN64_VERBOSE" && initialize || exit $?

bl64_msg_show_batch_start "$SYSDEN64_COMMAND"
case "$SYSDEN64_COMMAND" in
  'user_wide_create') user_wide_create "$SYSDEN64_HOME" "$SYSDEN64_REPOSITORY" "$SYSDEN64_PROFILE" ;;
  'system_wide_create') system_wide_create "$SYSDEN64_HOME" ;;
  'lab_create') lab_create "$SYSDEN64_HOME" "$SYSDEN64_REPOSITORY" "$SYSDEN64_PROFILE" ;;
  'configuration_sync') configuration_sync "$SYSDEN64_HOME" ;;
  'profile_switch') profile_switch "$SYSDEN64_HOME" "$SYSDEN64_REPOSITORY" "$SYSDEN64_PROFILE" ;;
  'profile_list') profile_list "$SYSDEN64_HOME" "$SYSDEN64_REPOSITORY" ;;
  'sysden64_upgrade') sysden64_upgrade ;;
  'lock_enable') lock_enable "$SYSDEN64_MODULE" ;;
  'lock_disable') lock_disable "$SYSDEN64_MODULE" ;;
  'lock_list') lock_list ;;
  *) bl64_check_alert_parameter_invalid "$SYSDEN64_COMMAND" ;;
esac
bl64_msg_show_batch_finish $? "$SYSDEN64_COMMAND"
