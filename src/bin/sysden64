#!/usr/bin/env bash
#######################################
# Copyright [2024] [serdigital64@gmail.com]
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#######################################

#
# Imports
#

# Automation64 / Root path
declare SYSDEN64_PATH_AT64="${HOME}/at64"
[[ ! -d "${SYSDEN64_PATH_AT64}/bl64" ]] && SYSDEN64_PATH_AT64='/opt'
# SysDen64 / Installation path
declare SYSDEN64_PATH_ROOT="${SYSDEN64_PATH_ROOT:-${SYSDEN64_PATH_AT64}/sysden64}"

# BashLib64 / Installation path
declare SYSDEN64_PATH_BL64="${SYSDEN64_PATH_BL64:-${SYSDEN64_PATH_AT64}/bl64}"
# shellcheck source-path=SCRIPTDIR/../../lib/bl64
source "${SYSDEN64_PATH_BL64}/bashlib64-module-api.bash" &&
  source "${SYSDEN64_PATH_BL64}/bashlib64-module-ui.bash" &&
  source "${SYSDEN64_PATH_BL64}/bashlib64-module-xsv.bash" &&
  source "${SYSDEN64_PATH_BL64}/bashlib64-module-bsh.bash" &&
  source "${SYSDEN64_PATH_BL64}/bashlib64-module-vcs.bash" &&
  source "${SYSDEN64_PATH_BL64}/bashlib64-module-rxtx.bash" &&
  source "${SYSDEN64_PATH_BL64}/bashlib64-module-fmt.bash" &&
  source "${SYSDEN64_PATH_BL64}/bashlib64-module-txt.bash" &&
  source "${SYSDEN64_PATH_BL64}/bashlib64-module-fs.bash" &&
  source "${SYSDEN64_PATH_BL64}/bashlib64-module-rnd.bash" &&
  source "${SYSDEN64_PATH_BL64}/bashlib64-module-iam.bash" &&
  source "${SYSDEN64_PATH_BL64}/bashlib64-core.bash" || exit $?

# shellcheck source-path=SCRIPTDIR/../lib disable=SC1091
source "${SYSDEN64_PATH_ROOT}/lib/module-lib.bash" || exit $?

#
# Globals
#

# SysDen64 / Version
readonly SYSDEN64_VERSION='3.0.3'
# SysDen64 / Application configuration setup modules
declare SYSDEN64_PATH_LIB=''
# SysDen64 / Application configuration boilerplates
declare SYSDEN64_PATH_ETC=''
# SysDen64 / Shell modules repository
# shellcheck disable=SC2034
readonly SYSDEN64_PATH_SHELLENV='.env.d'
# SysDen64 / Version marker
declare SYSDEN64_PATH_VERSION='.sysden64'
# SysDen64 / Current profile marker
declare SYSDEN64_PATH_PROFILE='.sysden64-profile'
# SysDen64 / External repositories
readonly SYSDEN64_PATH_REPOS='repos'
# SysDen64 / Home config Backup
declare SYSDEN64_PATH_BACKUP='home-bkp'
# SysDen64 / Shared configs
declare SYSDEN64_PATH_SHARED='shared'
# SysDen64 / Prefix
readonly SYSDEN64_PREFIX='sd64'
# SysDen64 / Profile switch marker
declare SYSDEN64_FLAG_PROFILE_SWITCH="$BL64_VAR_OFF"
# SysDen64 / Module upgrade marker
declare SYSDEN64_FLAG_MODULE_SYNC="$BL64_VAR_OFF"
# SysDen64 / Flag for devbin repo
declare SYSDEN64_FLAG_USER_WIDE="$BL64_VAR_OFF"

# SysDen64 / Modules
declare SYSDEN64_MODULE_LIST_BASE=''
SYSDEN64_MODULE_LIST_BASE+='env '
SYSDEN64_MODULE_LIST_BASE+='bash '
SYSDEN64_MODULE_LIST_BASE+='starship '
SYSDEN64_MODULE_LIST_BASE+='zsh '
SYSDEN64_MODULE_LIST_BASE+='omz '
SYSDEN64_MODULE_LIST_BASE+='p10k '
declare SYSDEN64_MODULE_LIST_TOOLS=''
SYSDEN64_MODULE_LIST_TOOLS+='alacritty '
SYSDEN64_MODULE_LIST_TOOLS+='ansible '
SYSDEN64_MODULE_LIST_TOOLS+='awscli '
SYSDEN64_MODULE_LIST_TOOLS+='bat '
SYSDEN64_MODULE_LIST_TOOLS+='btop '
SYSDEN64_MODULE_LIST_TOOLS+='delta '
SYSDEN64_MODULE_LIST_TOOLS+='docker '
SYSDEN64_MODULE_LIST_TOOLS+='duf '
SYSDEN64_MODULE_LIST_TOOLS+='fd '
SYSDEN64_MODULE_LIST_TOOLS+='gcloud '
SYSDEN64_MODULE_LIST_TOOLS+='git '
SYSDEN64_MODULE_LIST_TOOLS+='github '
SYSDEN64_MODULE_LIST_TOOLS+='gpg '
SYSDEN64_MODULE_LIST_TOOLS+='hwatch '
SYSDEN64_MODULE_LIST_TOOLS+='homebrew '
SYSDEN64_MODULE_LIST_TOOLS+='keepassx '
SYSDEN64_MODULE_LIST_TOOLS+='kubectl '
SYSDEN64_MODULE_LIST_TOOLS+='lnav '
SYSDEN64_MODULE_LIST_TOOLS+='lsd '
SYSDEN64_MODULE_LIST_TOOLS+='mc '
SYSDEN64_MODULE_LIST_TOOLS+='nodejs '
SYSDEN64_MODULE_LIST_TOOLS+='nvim '
SYSDEN64_MODULE_LIST_TOOLS+='ripgrep '
SYSDEN64_MODULE_LIST_TOOLS+='ssh '
SYSDEN64_MODULE_LIST_TOOLS+='terraform '
SYSDEN64_MODULE_LIST_TOOLS+='tmux '
SYSDEN64_MODULE_LIST_TOOLS+='zellij '

# Optional
# OFF # SYSDEN64_MODULE_LIST_TOOLS+='eza '

# DevBin64 / Installation path
declare SYSDEN64_PATH_DEVBIN64="${SYSDEN64_PATH_DEVBIN64:-${SYSDEN64_PATH_AT64}/devbin64}"
# DevBin64 / Bootstrap path
readonly SYSDEN64_CMD_DEVBIN64_BOOTSTRAP="${SYSDEN64_PATH_DEVBIN64}/bin/dev-bootstrap"
# DevBin64 / Env Set script
declare SYSDEN64_CMD_DEVBIN64_SET='bin/dev-set'
# DevBin64 / Profile set script
declare SYSDEN64_CMD_DEVBIN64_PROFILE='bin/dev-profile-create'
# DevBin64 / SysDen64 local installer
declare SYSDEN64_CMD_DEVBIN64_LIB_SYSDEN64='bin/dev-lib-sysden64'
# DevBin64 / Installer64 local installer
declare SYSDEN64_CMD_DEVBIN64_LIB_INSTALLER64='bin/dev-lib-installer64'
# DevBin64 / Bashlib64 local installer
declare SYSDEN64_CMD_DEVBIN64_LIB_BASHLIB64='bin/dev-lib-bashlib64'
# DevBin64 / Modules File
readonly SYSDEN64_FILE_DEVBIN64_MODULE='.devbin64-modules'
# DevBin64 / Modules
declare SYSDEN64_MODULE_DEVBIN64=''
SYSDEN64_MODULE_DEVBIN64+='bash\n'
SYSDEN64_MODULE_DEVBIN64+='git\n'
SYSDEN64_MODULE_DEVBIN64+='github\n'
SYSDEN64_MODULE_DEVBIN64+='gitleaks\n'
SYSDEN64_MODULE_DEVBIN64+='shellcheck\n'
SYSDEN64_MODULE_DEVBIN64+='sysden64\n'
# DevBin64 / Target profile
export DEV_PROFILE=''

#
# Functions
#

function module_upgrade() {
  bl64_dbg_app_show_function
  local module=''

  bl64_msg_show_task "upgrade source shared configuration modules (${SYSDEN64_PATH_SHARED})"
  bl64_check_directory "$SYSDEN64_PATH_SHARED" ||
    return $?

  # shellcheck disable=SC2164
  for module in $(
    cd "$SYSDEN64_PATH_SHARED"
    echo *
  ); do
    bl64_fs_path_remove "${SYSDEN64_PATH_SHARED}/${module}"
    bl64_fs_path_copy \
      "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" \
      "$SYSDEN64_PATH_SHARED" \
      "${SYSDEN64_PATH_ETC}/${module}" ||
      return $?
  done
}

function sysden64_upgrade() {
  bl64_dbg_app_show_function
  cd "$SYSDEN64_REPOSITORY" &&
    "$SYSDEN64_CMD_DEVBIN64_LIB_INSTALLER64" &&
    "$SYSDEN64_CMD_DEVBIN64_LIB_BASHLIB64" &&
    "$SYSDEN64_CMD_DEVBIN64_LIB_SYSDEN64" &&
    module_upgrade
}

function version_register() {
  bl64_dbg_app_show_function "$@"
  bl64_msg_show_task "register sysden64 version (${SYSDEN64_PATH_VERSION})"
  echo "$SYSDEN64_VERSION" >"$SYSDEN64_PATH_VERSION"
}

function module_setup() {
  bl64_dbg_app_show_function "$@"
  local home="$1"
  local module=''

  bl64_msg_show_separator 'configure base modules'
  for module in $SYSDEN64_MODULE_LIST_BASE; do
    # shellcheck disable=SC1090
    bl64_check_file "${SYSDEN64_PATH_LIB}/${module}.bash" &&
      source "${SYSDEN64_PATH_LIB}/${module}.bash" &&
      "module_${module}_setup" "$home" ||
      return $?
  done
  bl64_msg_show_separator 'configure optional modules'
  for module in $SYSDEN64_MODULE_LIST_TOOLS; do
    # shellcheck disable=SC1090
    bl64_check_file "${SYSDEN64_PATH_LIB}/${module}.bash" &&
      source "${SYSDEN64_PATH_LIB}/${module}.bash" &&
      "module_${module}_setup" "$home" ||
      return $?
  done
}

function devbin64_setup() {
  bl64_dbg_app_show_function "$@"
  local home="$1"
  local repository="$2"
  local profile="$3"

  bl64_msg_show_phase 'prepare DevBin64'
  bl64_msg_show_task "source environment (${repository} - ${profile})"
  DEV_PROFILE="$profile"
  unset DEV_PATH_ROOT
  # shellcheck disable=SC1090
  cd "$repository" &&
    source "$SYSDEN64_CMD_DEVBIN64_SET" ||
    return $?

  bl64_msg_show_task "create/update profile (${profile})"
  "$SYSDEN64_CMD_DEVBIN64_PROFILE" &&
    echo "$profile" >"$SYSDEN64_PATH_PROFILE" ||
    return $?

  bl64_msg_show_task "create shared configuration store (${SYSDEN64_PATH_SHARED})"
  bl64_fs_dir_create \
    "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" \
    "$SYSDEN64_PATH_SHARED" ||
    return $?

  bl64_msg_show_task "create/update home links to profile (${profile})"
  # shellcheck disable=SC2154
  bl64_fs_symlink_create \
    "${DEV_PATH_DOCS}" "${home}/${SYSDEN64_PREFIX}docs" "$BL64_VAR_ON" &&
    bl64_fs_symlink_create \
      "${DEV_PATH_SRC}" "${home}/${SYSDEN64_PREFIX}src" "$BL64_VAR_ON" &&
    bl64_fs_symlink_create \
      "${DEV_PATH_ROOT}/${SYSDEN64_PATH_REPOS}" "${home}/${SYSDEN64_PREFIX}repos" "$BL64_VAR_ON" &&
    bl64_fs_symlink_create \
      "${DEV_PATH_PROF_LOGS}" "${home}/${SYSDEN64_PREFIX}logs" "$BL64_VAR_ON" &&
    bl64_fs_symlink_create \
      "${DEV_PATH_PROF_VAULT}" "${home}/${SYSDEN64_PREFIX}vault" "$BL64_VAR_ON" &&
    bl64_fs_symlink_create \
      "${DEV_PATH_PROF_TMP}" "${home}/${SYSDEN64_PREFIX}tmp" "$BL64_VAR_ON" &&
    bl64_fs_symlink_create \
      "${DEV_PATH_PROF_ETC}" "${home}/${SYSDEN64_PREFIX}etc" "$BL64_VAR_ON" &&
    bl64_fs_symlink_create \
      "${DEV_PATH_PROF_VAR}" "${home}/${SYSDEN64_PREFIX}var" "$BL64_VAR_ON"
}

function xdg_setup() {
  bl64_dbg_app_show_function "$@"
  local home="$1"
  bl64_msg_show_phase 'prepare XDG'
  bl64_bsh_xdg_create \
    "$home"
}

function repository_create() {
  bl64_dbg_app_show_function "$@"
  local repository="$1"

  # shellcheck disable=SC2059
  bl64_fs_dir_create \
    "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" \
    "$repository" \
    "${repository}/${SYSDEN64_PATH_REPOS}" &&
    bl64_fs_file_create "${repository}/${SYSDEN64_PATH_REPOS}/.gitkeep" &&
    cd "$repository" &&
    printf "$SYSDEN64_MODULE_DEVBIN64" >"${repository}/${SYSDEN64_FILE_DEVBIN64_MODULE}" &&
    "$SYSDEN64_CMD_DEVBIN64_BOOTSTRAP" &&
    create_user_wide_ignore "$repository" &&
    "$SYSDEN64_CMD_DEVBIN64_LIB_SYSDEN64"
}

function create_user_wide_ignore() {
  bl64_dbg_app_show_function "$@"
  local repository="$1"
  local path_gitignore="${repository}/.gitignore"

  if ! bl64_txt_run_grep -qFx '/var/prof/*/home' "$path_gitignore"; then
    bl64_msg_show_task "update .gitignore to ignore home profiles (${path_gitignore})"
    bl64_txt_run_sed -i.bkp \
      '/# Keep placeholder for empty directories/i\
/var/prof/*/home\
/repos/*\
' \
      "$path_gitignore" ||
      return $?
    bl64_fs_path_remove "${path_gitignore}.bkp"
  fi
}

function system_wide_create() {
  bl64_dbg_app_show_function "$@"
  local home="$1"

  xdg_setup "$home" &&
    module_setup "$home" &&
    version_register "$home"
}

function user_wide_create() {
  bl64_dbg_app_show_function "$@"
  local home="$1"
  local repository="$2"
  local profile="$3"

  repository_create "$repository" &&
    xdg_setup "$home" &&
    devbin64_setup "$home" "$repository" "$profile" &&
    module_setup "$home" &&
    version_register "$repository"
}

function profile_switch() {
  bl64_dbg_app_show_function "$@"
  local home="$1"
  local repository="$2"
  local profile="$3"
  local current=''

  if [[ -f "$SYSDEN64_PATH_PROFILE" ]]; then
    current="$(<"$SYSDEN64_PATH_PROFILE")" ||
      return $?
    if [[ "$current" == "$profile" ]]; then
      bl64_msg_show_warning "Profile already activated. No further action taken (${profile})"
      return 0
    fi
  fi
  devbin64_setup "$home" "$repository" "$profile" &&
    module_setup "$home"
}

function configuration_sync() {
  bl64_dbg_app_show_function "$@"
  local home="$1"
  module_setup "$home"
}

#######################################
# Initialize environment
#
# Arguments:
#   None
# Outputs:
#   Initializacion progress messages
# Returns:
#   0: initialization ok
#   >: failed to initialize
#######################################
function initialize() {
  bl64_dbg_app_show_function

  bl64_check_parameter 'SYSDEN64_COMMAND' ||
    { bl64_msg_help_show && return 1; }

  if [[ "$SYSDEN64_COMMAND" == 'system_wide_create' ]]; then
    if [[ -d "$SYSDEN64_REPOSITORY" ]]; then
      bl64_msg_show_error "The system-wide feature can not be used when user-wide is already deployed (${SYSDEN64_REPOSITORY})"
      # shellcheck disable=SC2086
      return $BL64_LIB_ERROR_TASK_FAILED
    fi
  elif [[ "$SYSDEN64_COMMAND" == 'profile_switch' ]]; then
    SYSDEN64_FLAG_USER_WIDE="$BL64_VAR_ON"
    # shellcheck disable=SC2034
    SYSDEN64_FLAG_PROFILE_SWITCH="$BL64_VAR_ON"
    bl64_check_directory "$SYSDEN64_REPOSITORY" ||
      return $?
  elif [[ "$SYSDEN64_COMMAND" == 'user_wide_create' ]]; then
    SYSDEN64_FLAG_USER_WIDE="$BL64_VAR_ON"
    bl64_check_command "$SYSDEN64_CMD_DEVBIN64_BOOTSTRAP" ||
      return $?
  elif [[ "$SYSDEN64_COMMAND" == 'configuration_sync' ]]; then
    # shellcheck disable=SC2034
    SYSDEN64_FLAG_MODULE_SYNC="$BL64_VAR_ON"
    [[ -d "$SYSDEN64_REPOSITORY" ]] && SYSDEN64_FLAG_USER_WIDE="$BL64_VAR_ON"
  elif [[ "$SYSDEN64_COMMAND" == 'sysden64_upgrade' ]]; then
    SYSDEN64_FLAG_USER_WIDE="$BL64_VAR_ON"
    bl64_check_directory "$SYSDEN64_REPOSITORY" ||
      return $?
  fi

  if bl64_lib_flag_is_enabled "$SYSDEN64_FLAG_USER_WIDE"; then
    SYSDEN64_PATH_VERSION="${SYSDEN64_REPOSITORY}/${SYSDEN64_PATH_VERSION}"
    SYSDEN64_PATH_BACKUP="${SYSDEN64_REPOSITORY}/tmp/${SYSDEN64_PATH_BACKUP}"
    SYSDEN64_CMD_DEVBIN64_SET="${SYSDEN64_REPOSITORY}/${SYSDEN64_CMD_DEVBIN64_SET}"
    SYSDEN64_CMD_DEVBIN64_PROFILE="${SYSDEN64_REPOSITORY}/${SYSDEN64_CMD_DEVBIN64_PROFILE}"
    SYSDEN64_CMD_DEVBIN64_LIB_SYSDEN64="${SYSDEN64_REPOSITORY}/${SYSDEN64_CMD_DEVBIN64_LIB_SYSDEN64}"
    SYSDEN64_CMD_DEVBIN64_LIB_INSTALLER64="${SYSDEN64_REPOSITORY}/${SYSDEN64_CMD_DEVBIN64_LIB_INSTALLER64}"
    SYSDEN64_CMD_DEVBIN64_LIB_BASHLIB64="${SYSDEN64_REPOSITORY}/${SYSDEN64_CMD_DEVBIN64_LIB_BASHLIB64}"
    SYSDEN64_PATH_LIB="${SYSDEN64_REPOSITORY}/lib/sd64/lib"
    SYSDEN64_PATH_ETC="${SYSDEN64_REPOSITORY}/lib/sd64/etc"
    SYSDEN64_PATH_SHARED="${SYSDEN64_REPOSITORY}/etc/${SYSDEN64_PATH_SHARED}"
    SYSDEN64_PATH_PROFILE="${SYSDEN64_REPOSITORY}/${SYSDEN64_PATH_PROFILE}"
  else
    SYSDEN64_PATH_VERSION="${SYSDEN64_HOME}/${SYSDEN64_PATH_VERSION}"
    SYSDEN64_PATH_BACKUP="${SYSDEN64_HOME}/${SYSDEN64_PREFIX}-${SYSDEN64_PATH_BACKUP}"
    SYSDEN64_CMD_DEVBIN64_SET="${SYSDEN64_PATH_DEVBIN64}/${SYSDEN64_CMD_DEVBIN64_SET}"
    SYSDEN64_CMD_DEVBIN64_PROFILE="${SYSDEN64_PATH_DEVBIN64}/${SYSDEN64_CMD_DEVBIN64_PROFILE}"
    SYSDEN64_CMD_DEVBIN64_LIB_SYSDEN64="${SYSDEN64_PATH_DEVBIN64}/${SYSDEN64_CMD_DEVBIN64_LIB_SYSDEN64}"
    SYSDEN64_CMD_DEVBIN64_LIB_INSTALLER64="${SYSDEN64_PATH_DEVBIN64}/${SYSDEN64_CMD_DEVBIN64_LIB_INSTALLER64}"
    SYSDEN64_CMD_DEVBIN64_LIB_BASHLIB64="${SYSDEN64_PATH_DEVBIN64}/${SYSDEN64_CMD_DEVBIN64_LIB_BASHLIB64}"
    SYSDEN64_PATH_LIB="${SYSDEN64_PATH_ROOT}/lib"
    SYSDEN64_PATH_ETC="${SYSDEN64_PATH_ROOT}/etc"
    bl64_check_directory "$SYSDEN64_PATH_ETC" &&
      bl64_check_directory "$SYSDEN64_PATH_LIB" ||
      return $?
  fi
  bl64_msg_show_setup "$BL64_VAR_DEFAULT" \
    'SYSDEN64_COMMAND' \
    'SYSDEN64_HOME' \
    'SYSDEN64_FLAG_USER_WIDE' \
    'SYSDEN64_PROFILE' \
    'SYSDEN64_REPOSITORY' \
    'SYSDEN64_PATH_SHARED'
}

#
# Main
#

declare SYSDEN64_COMMAND=''
declare SYSDEN64_DEBUG="$BL64_DBG_TARGET_NONE"
declare SYSDEN64_OPTION=''
declare SYSDEN64_VERBOSE="$BL64_MSG_VERBOSE_APP"
declare SYSDEN64_HOME="$HOME"
declare SYSDEN64_REPOSITORY="${SYSDEN64_HOME}/${SYSDEN64_PREFIX}"
declare SYSDEN64_PROFILE='default'
bl64_lib_script_version_set '6.1.2'
bl64_msg_help_usage_set '<-s|-l|-w|-u|-g> [-o Home] [-i Repo] [-p Profile] [-V Verbose] [-D Debug] [-h]'
bl64_msg_help_about_set 'SysDen64 is an opinionated portable working environment for the IT nomad'
# shellcheck disable=SC2016
bl64_msg_help_parameters_set \
  '-s         : Create a user-wide configuration
-l         : Create a system-wide configuration
-u         : Synchronize the current configuration
-w         : Switch to the specified configuration profile. Requires the -p argument
-g         : Upgrade user-wide modules
-h         : Show help
-o Home    : Set the full path to the users home directory. Defaults to $HOME
-i Repo    : Set the path to the configuration repository. Defaults to $HOME/sd64
-p Profile : Specify the configuration profile name. Required for -w. Defaults to default.
-V Verbose : Set verbosity level. Format: one of BL64_MSG_VERBOSE_*
-D Debug   : Enable debugging mode. Format: one of BL64_DBG_TARGET_*'

while getopts ':slwugo:i:p:V:D:h' SYSDEN64_OPTION; do
  case "$SYSDEN64_OPTION" in
  s) SYSDEN64_COMMAND='user_wide_create' ;;
  l) SYSDEN64_COMMAND='system_wide_create' ;;
  u) SYSDEN64_COMMAND='configuration_sync' ;;
  w) SYSDEN64_COMMAND='profile_switch' ;;
  g) SYSDEN64_COMMAND='sysden64_upgrade' ;;
  o) SYSDEN64_HOME="$OPTARG" ;;
  i) SYSDEN64_REPOSITORY="$OPTARG" ;;
  p) SYSDEN64_PROFILE="$OPTARG" ;;
  V) SYSDEN64_VERBOSE="$OPTARG" ;;
  D) SYSDEN64_DEBUG="$OPTARG" ;;
  h) bl64_msg_help_show && exit 0 ;;
  *) bl64_msg_help_show && exit 1 ;;
  esac
done
bl64_dbg_set_level "$SYSDEN64_DEBUG" && bl64_msg_set_level "$SYSDEN64_VERBOSE" && initialize || exit $?

bl64_msg_show_batch_start "$SYSDEN64_COMMAND"
case "$SYSDEN64_COMMAND" in
'user_wide_create') user_wide_create "$SYSDEN64_HOME" "$SYSDEN64_REPOSITORY" "$SYSDEN64_PROFILE" ;;
'configuration_sync') configuration_sync "$SYSDEN64_HOME" ;;
'profile_switch') profile_switch "$SYSDEN64_HOME" "$SYSDEN64_REPOSITORY" "$SYSDEN64_PROFILE" ;;
'system_wide_create') system_wide_create "$SYSDEN64_HOME" ;;
'sysden64_upgrade') sysden64_upgrade ;;
*) bl64_check_alert_parameter_invalid "$SYSDEN64_COMMAND" ;;
esac
bl64_msg_show_batch_finish $? "$SYSDEN64_COMMAND"
