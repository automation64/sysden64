#!/usr/bin/env bash
#######################################
# SysDen64
#
# * Version: 4.3.0
#
#######################################
# Copyright [2024] [serdigital64@gmail.com]
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#######################################

#
# Imports
#

declare SYSDEN64_PATH_BL64="${SYSDEN64_PATH_BL64:-/opt/bl64}"
# shellcheck source-path=SCRIPTDIR/../../lib/bl64
source "${SYSDEN64_PATH_BL64}/bashlib64-module-api.bash" &&
  source "${SYSDEN64_PATH_BL64}/bashlib64-module-ui.bash" &&
  source "${SYSDEN64_PATH_BL64}/bashlib64-module-xsv.bash" &&
  source "${SYSDEN64_PATH_BL64}/bashlib64-module-bsh.bash" &&
  source "${SYSDEN64_PATH_BL64}/bashlib64-module-vcs.bash" &&
  source "${SYSDEN64_PATH_BL64}/bashlib64-module-rxtx.bash" &&
  source "${SYSDEN64_PATH_BL64}/bashlib64-module-fmt.bash" &&
  source "${SYSDEN64_PATH_BL64}/bashlib64-module-txt.bash" &&
  source "${SYSDEN64_PATH_BL64}/bashlib64-module-fs.bash" &&
  source "${SYSDEN64_PATH_BL64}/bashlib64-module-rnd.bash" &&
  source "${SYSDEN64_PATH_BL64}/bashlib64-module-iam.bash" &&
  source "${SYSDEN64_PATH_BL64}/bashlib64-core.bash" || exit 1

#
# Globals
#

# SysDen64 / Version
declare SYSDEN64_VERSION='1.5.0'
# SysDen64 / Installation path
declare SYSDEN64_PATH_ROOT="${SYSDEN64_PATH_ROOT:-/opt/sysden64}"
# SysDen64 / Application configuration setup modules
declare SYSDEN64_PATH_LIB="${SYSDEN64_PATH_ROOT}/lib"
# SysDen64 / Application configuration boilerplates
declare SYSDEN64_PATH_ETC="${SYSDEN64_PATH_ROOT}/etc"
# SysDen64 / Shell modules repository
# shellcheck disable=SC2034
declare SYSDEN64_PATH_SHELLENV='.env.d'
# SysDen64 / Version placeholder
declare SYSDEN64_PATH_VERSION='.sysden64'

# SysDen64 / Common messages
# shellcheck disable=SC2034
{
  declare SYSDEN64_TXT_NOT_DETECTED='tool not detected. No further action taken'
  declare SYSDEN64_TXT_CONFIGURED='already configured. No further action taken'
  declare SYSDEN64_TXT_WATERMARK='# Warning: configuration file generated by SysDen64. DO NOT MODIFY'
}

# SysDen64 / Modules
declare SYSDEN64_MODULE_LIST_BASE=''
SYSDEN64_MODULE_LIST_BASE+='env '
SYSDEN64_MODULE_LIST_BASE+='bash '
SYSDEN64_MODULE_LIST_BASE+='starship '
SYSDEN64_MODULE_LIST_BASE+='zsh '
SYSDEN64_MODULE_LIST_BASE+='omz '
SYSDEN64_MODULE_LIST_BASE+='p10k '
declare SYSDEN64_MODULE_LIST_TOOLS=''
SYSDEN64_MODULE_LIST_TOOLS+='alacritty '
SYSDEN64_MODULE_LIST_TOOLS+='ansible '
SYSDEN64_MODULE_LIST_TOOLS+='awscli '
SYSDEN64_MODULE_LIST_TOOLS+='bat '
SYSDEN64_MODULE_LIST_TOOLS+='btop '
SYSDEN64_MODULE_LIST_TOOLS+='delta '
SYSDEN64_MODULE_LIST_TOOLS+='docker '
SYSDEN64_MODULE_LIST_TOOLS+='duf '
SYSDEN64_MODULE_LIST_TOOLS+='eza '
SYSDEN64_MODULE_LIST_TOOLS+='fd '
SYSDEN64_MODULE_LIST_TOOLS+='gcloud '
SYSDEN64_MODULE_LIST_TOOLS+='git '
SYSDEN64_MODULE_LIST_TOOLS+='github '
SYSDEN64_MODULE_LIST_TOOLS+='gpg '
SYSDEN64_MODULE_LIST_TOOLS+='hwatch '
SYSDEN64_MODULE_LIST_TOOLS+='keepassx '
SYSDEN64_MODULE_LIST_TOOLS+='kubectl '
SYSDEN64_MODULE_LIST_TOOLS+='lnav '
SYSDEN64_MODULE_LIST_TOOLS+='mc '
SYSDEN64_MODULE_LIST_TOOLS+='nvim '
SYSDEN64_MODULE_LIST_TOOLS+='ripgrep '
SYSDEN64_MODULE_LIST_TOOLS+='ssh '
SYSDEN64_MODULE_LIST_TOOLS+='terraform '
SYSDEN64_MODULE_LIST_TOOLS+='tmux '
SYSDEN64_MODULE_LIST_TOOLS+='zellij '

# DevBin64 / Target profile
export DEV_PROFILE='default'
# DevBin64 / Use devbin64 type repository?
declare SYSDEN64_USE_DEVBIN64="$BL64_VAR_OFF"
# DevBin64 / Installation path
declare SYSDEN64_PATH_DEVBIN64="${SYSDEN64_PATH_DEVBIN64:-/opt/devbin64}"
# DevBin64 / Env Set script
declare SYSDEN64_FILE_DEVBIN64_SET='./bin/dev-set'
# DevBin64 / Profile set script
declare SYSDEN64_FILE_DEVBIN64_PROFILE='./bin/dev-profile-create'
# DevBin64 / Bootstrap path
declare SYSDEN64_FILE_DEVBIN64_BOOTSTRAP="${SYSDEN64_PATH_DEVBIN64}/bin/dev-bootstrap"
# DevBin64 / Modules File
declare SYSDEN64_FILE_DEVBIN64_MODULE='.devbin64-modules'
# DevBin64 / Dev SysDen64
declare SYSDEN64_FILE_DEVBIN64_SYSDEN64='./bin/dev-lib-sysden64'
# DevBin64 / Modules
declare SYSDEN64_MODULE_DEVBIN64=''
SYSDEN64_MODULE_DEVBIN64+='bash\n'
SYSDEN64_MODULE_DEVBIN64+='git\n'
SYSDEN64_MODULE_DEVBIN64+='github\n'
SYSDEN64_MODULE_DEVBIN64+='gitleaks\n'
SYSDEN64_MODULE_DEVBIN64+='shellcheck\n'
SYSDEN64_MODULE_DEVBIN64+='sysden64\n'

#
# Functions
#

function sysden64_version_register() {
  bl64_dbg_app_show_function "$@"
  local home="$1"
  echo "$SYSDEN64_VERSION" >"${home}/${SYSDEN64_PATH_VERSION}"
}

function sysden64_module_setup() {
  bl64_dbg_app_show_function "$@"
  local home="$1"
  local module=''

  for module in $SYSDEN64_MODULE_LIST_BASE; do
    # shellcheck disable=SC1090
    bl64_check_file "${SYSDEN64_PATH_LIB}/${module}.bash" &&
      source "${SYSDEN64_PATH_LIB}/${module}.bash" &&
      "sysden64_${module}_setup" "$home" ||
      return $?
  done
  for module in $SYSDEN64_MODULE_LIST_TOOLS; do
    # shellcheck disable=SC1090
    bl64_check_file "${SYSDEN64_PATH_LIB}/${module}.bash" &&
      source "${SYSDEN64_PATH_LIB}/${module}.bash" &&
      "sysden64_${module}_setup" "$home" ||
      return $?
  done
}

function sysden64_devbin64_setup() {
  bl64_dbg_app_show_function "$@"
  local home="$1"
  local repository="$2"

  bl64_msg_show_phase 'prepare DevBin64'
  bl64_msg_show_task "source DevBin64 environment (${repository})"
  # shellcheck disable=SC1090
  cd "$repository" &&
    source "$SYSDEN64_FILE_DEVBIN64_SET" ||
    return $?

  bl64_msg_show_task "create/update DevBin64 DEV_PROFILE (${DEV_PROFILE})"
  "./$SYSDEN64_FILE_DEVBIN64_PROFILE" ||
    return $?

  # shellcheck disable=SC2154
  bl64_fs_create_symlink \
    "${DEV_PATH_PROF_LOGS}" \
    "${home}/logs" &&
    bl64_fs_create_symlink \
      "${DEV_PATH_PROF_VAULT}" \
      "${home}/vault" &&
    bl64_fs_create_symlink \
      "${DEV_PATH_PROF_TMP}" \
      "${home}/tmp" &&
    bl64_fs_create_symlink \
      "${DEV_PATH_PROF_ETC}" \
      "${home}/etc" &&
    bl64_fs_create_symlink \
      "${DEV_PATH_PROF_VAR}" \
      "${home}/var" &&
    bl64_fs_create_symlink \
      "${DEV_PATH_DOCS}" \
      "${home}/docs" &&
    bl64_fs_create_symlink \
      "${DEV_PATH_SRC}" \
      "${home}/src"
}

function sysden64_xdg_setup() {
  bl64_dbg_app_show_function "$@"
  local home="$1"
  bl64_msg_show_phase 'prepare XDG'
  bl64_iam_xdg_create \
    "$home"
}

function sysden64_deploy_home() {
  bl64_dbg_app_show_function "$@"
  local home="$1"
  local repository="$2"

  sysden64_xdg_setup "$home" ||
    return $?

  if bl64_lib_flag_is_enabled "$SYSDEN64_USE_DEVBIN64"; then
    sysden64_devbin64_setup "$home" "$repository" ||
      return $?
  fi
  sysden64_module_setup "$home" &&
    sysden64_version_register "$home"
}

function sysden64_deploy_sysden() {
  bl64_dbg_app_show_function "$@"
  local repository="$1"

  # shellcheck disable=SC2059
  bl64_fs_dir_create \
    "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" \
    "$repository" &&
    cd "$repository" &&
    printf "$SYSDEN64_MODULE_DEVBIN64" >"${repository}/${SYSDEN64_FILE_DEVBIN64_MODULE}" &&
    "$SYSDEN64_FILE_DEVBIN64_BOOTSTRAP" &&
    "$SYSDEN64_FILE_DEVBIN64_SYSDEN64"
}

#######################################
# Initialize environment
#
# Arguments:
#   None
# Outputs:
#   Initializacion progress messages
# Returns:
#   0: initialization ok
#   >: failed to initialize
#######################################
function sysden64_initialize() {
  bl64_dbg_app_show_function "@"
  local command="$1"
  local repository="$2"

  bl64_check_parameter 'command' ||
    { sysden64_help && return 1; }

  if [[ "$command" == 'deploy_home' ]]; then
    if bl64_lib_flag_is_enabled "$SYSDEN64_USE_DEVBIN64"; then
      bl64_check_parameter 'repository' &&
        bl64_check_directory "$repository" &&
        bl64_check_file "${repository}/${SYSDEN64_FILE_DEVBIN64_SET}" &&
        bl64_check_file "${repository}/${SYSDEN64_FILE_DEVBIN64_PROFILE}" ||
        return $?
    fi
  elif [[ "$command" == 'deploy_sysden' ]]; then
    bl64_check_parameter 'repository' &&
      bl64_check_command "$SYSDEN64_FILE_DEVBIN64_BOOTSTRAP" ||
      return $?
    if [[ -d "$repository" ]]; then
      bl64_msg_show_error "target directory must not exist (${repository})"
      # shellcheck disable=SC2086
      return $BL64_LIB_ERROR_TASK_FAILED
    fi
  fi
  bl64_check_directory "$SYSDEN64_PATH_ETC" &&
    bl64_check_directory "$SYSDEN64_PATH_LIB"
}

#######################################
# Show script usage description
#
# Arguments:
#   None
# Outputs:
#   Command line format and description
# Returns:
#   0
#######################################
function sysden64_help() {
  # shellcheck disable=SC2016
  bl64_msg_show_usage \
    '<-l|-c> [-o Home] [-i Repo] [-p Profile] [-d] [-V Verbose] [-D Debug] [-h]' \
    'SysDen64 is an opinionated portable working environment for the DevOps/SRE/CloudAdmin/SysAdmin nomad' \
    '
    -l         : Deploy configuration files to home directory
    -c         : Create and deploy on SysDen64 GIT repository
    ' '
    -d         : Use SysDen64 repository for persistense
    -h         : Show help
    ' '
    -o Home    : Full path to the users home directory. Default: $HOME
    -i Repo    : SysDen64 repository path. Required for -d and -l
    -p Profile : SysDen64 DEV_PROFILE. Required for -d. Default: default
    -V Verbose : Set verbosity level. Format: one of BL64_MSG_VERBOSE_*
    -D Debug   : Enable debugging mode. Format: one of BL64_DBG_TARGET_*
    '
}

#
# Main
#

declare sysden64_command=''
declare sysden64_debug="$BL64_DBG_TARGET_NONE"
declare sysden64_option=''
declare sysden64_verbose="$BL64_MSG_VERBOSE_APP"
declare sysden64_home="$HOME"
declare sysden64_repository="$BL64_VAR_DEFAULT"

while getopts ':cldo:i:p:V:D:h' sysden64_option; do
  case "$sysden64_option" in
  l) sysden64_command='deploy_home' ;;
  c) sysden64_command='deploy_sysden' ;;
  d) SYSDEN64_USE_DEVBIN64="$BL64_VAR_ON" ;;
  o) sysden64_home="$OPTARG" ;;
  i) sysden64_repository="$OPTARG" ;;
  p) DEV_PROFILE="$OPTARG" ;;
  V) sysden64_verbose="$OPTARG" ;;
  D) sysden64_debug="$OPTARG" ;;
  h) sysden64_help && exit 0 ;;
  *) sysden64_help && exit 1 ;;
  esac
done
bl64_dbg_set_level "$sysden64_debug" && bl64_msg_set_level "$sysden64_verbose" || exit $?
sysden64_initialize "$sysden64_command" "$sysden64_repository" || exit $?

bl64_msg_show_batch_start "$sysden64_command"
case "$sysden64_command" in
'deploy_home') sysden64_deploy_home "$sysden64_home" "$sysden64_repository" ;;
'deploy_sysden') sysden64_deploy_sysden "$sysden64_repository" ;;
*) bl64_check_alert_parameter_invalid "$sysden64_command" ;;
esac
bl64_msg_show_batch_finish $? "$sysden64_command"
