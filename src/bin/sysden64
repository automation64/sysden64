#!/usr/bin/env bash
#######################################
# Copyright [2024] [serdigital64@gmail.com]
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#######################################

#
# Imports
#

readonly MAIN_PATH_BL64="${MAIN_PATH_BL64:-/opt/bl64}"
# shellcheck source-path=SCRIPTDIR/../../lib/bl64
source "${MAIN_PATH_BL64}/bashlib64-module-api.bash" &&
  source "${MAIN_PATH_BL64}/bashlib64-module-ui.bash" &&
  source "${MAIN_PATH_BL64}/bashlib64-module-xsv.bash" &&
  source "${MAIN_PATH_BL64}/bashlib64-module-bsh.bash" &&
  source "${MAIN_PATH_BL64}/bashlib64-module-vcs.bash" &&
  source "${MAIN_PATH_BL64}/bashlib64-module-rxtx.bash" &&
  source "${MAIN_PATH_BL64}/bashlib64-module-fmt.bash" &&
  source "${MAIN_PATH_BL64}/bashlib64-module-txt.bash" &&
  source "${MAIN_PATH_BL64}/bashlib64-module-fs.bash" &&
  source "${MAIN_PATH_BL64}/bashlib64-module-rnd.bash" &&
  source "${MAIN_PATH_BL64}/bashlib64-module-iam.bash" &&
  source "${MAIN_PATH_BL64}/bashlib64-core.bash" || exit 1

#
# Globals
#

# SysDen64 / Version
readonly MAIN_VERSION='1.5.1'
# SysDen64 / Installation path
readonly MAIN_PATH_ROOT="${MAIN_PATH_ROOT:-/opt/sysden64}"
# SysDen64 / Application configuration setup modules
readonly MAIN_PATH_LIB="${MAIN_PATH_ROOT}/lib"
# SysDen64 / Application configuration boilerplates
readonly MAIN_PATH_ETC="${MAIN_PATH_ROOT}/etc"
# SysDen64 / Shell modules repository
# shellcheck disable=SC2034
readonly MAIN_PATH_SHELLENV='.env.d'
# SysDen64 / Version placeholder
readonly MAIN_PATH_VERSION='.sysden64'

# SysDen64 / Common messages
# shellcheck disable=SC2034
{
  readonly MAIN_TXT_NOT_DETECTED='tool not detected. No further action taken'
  readonly MAIN_TXT_CONFIGURED='already configured. No further action taken'
  readonly MAIN_TXT_WATERMARK='# Warning: configuration file generated by SysDen64. DO NOT MODIFY'
}

# SysDen64 / Modules
declare MAIN_MODULE_LIST_BASE=''
MAIN_MODULE_LIST_BASE+='env '
MAIN_MODULE_LIST_BASE+='bash '
MAIN_MODULE_LIST_BASE+='starship '
MAIN_MODULE_LIST_BASE+='zsh '
MAIN_MODULE_LIST_BASE+='omz '
MAIN_MODULE_LIST_BASE+='p10k '
declare MAIN_MODULE_LIST_TOOLS=''
MAIN_MODULE_LIST_TOOLS+='alacritty '
MAIN_MODULE_LIST_TOOLS+='ansible '
MAIN_MODULE_LIST_TOOLS+='awscli '
MAIN_MODULE_LIST_TOOLS+='bat '
MAIN_MODULE_LIST_TOOLS+='btop '
MAIN_MODULE_LIST_TOOLS+='delta '
MAIN_MODULE_LIST_TOOLS+='docker '
MAIN_MODULE_LIST_TOOLS+='duf '
MAIN_MODULE_LIST_TOOLS+='eza '
MAIN_MODULE_LIST_TOOLS+='fd '
MAIN_MODULE_LIST_TOOLS+='gcloud '
MAIN_MODULE_LIST_TOOLS+='git '
MAIN_MODULE_LIST_TOOLS+='github '
MAIN_MODULE_LIST_TOOLS+='gpg '
MAIN_MODULE_LIST_TOOLS+='hwatch '
MAIN_MODULE_LIST_TOOLS+='keepassx '
MAIN_MODULE_LIST_TOOLS+='kubectl '
MAIN_MODULE_LIST_TOOLS+='lnav '
MAIN_MODULE_LIST_TOOLS+='mc '
MAIN_MODULE_LIST_TOOLS+='nvim '
MAIN_MODULE_LIST_TOOLS+='ripgrep '
MAIN_MODULE_LIST_TOOLS+='ssh '
MAIN_MODULE_LIST_TOOLS+='terraform '
MAIN_MODULE_LIST_TOOLS+='tmux '
MAIN_MODULE_LIST_TOOLS+='zellij '

# DevBin64 / Target profile
export DEV_PROFILE=''
# DevBin64 / Installation path
readonly MAIN_PATH_DEVBIN64="${MAIN_PATH_DEVBIN64:-/opt/devbin64}"
# DevBin64 / Env Set script
readonly MAIN_CMD_DEVBIN64_SET='./bin/dev-set'
# DevBin64 / Profile set script
readonly MAIN_CMD_DEVBIN64_PROFILE='./bin/dev-profile-create'
# DevBin64 / Bootstrap path
readonly MAIN_CMD_DEVBIN64_BOOTSTRAP="${MAIN_PATH_DEVBIN64}/bin/dev-bootstrap"
# DevBin64 / Dev SysDen64
readonly MAIN_CMD_DEVBIN64_SYSDEN64='./bin/dev-lib-sysden64'
# DevBin64 / Modules File
readonly MAIN_FILE_DEVBIN64_MODULE='.devbin64-modules'
# DevBin64 / Modules
declare MAIN_MODULE_DEVBIN64=''
MAIN_MODULE_DEVBIN64+='bash\n'
MAIN_MODULE_DEVBIN64+='git\n'
MAIN_MODULE_DEVBIN64+='github\n'
MAIN_MODULE_DEVBIN64+='gitleaks\n'
MAIN_MODULE_DEVBIN64+='shellcheck\n'
MAIN_MODULE_DEVBIN64+='sysden64\n'

#
# Functions
#

function version_register() {
  bl64_dbg_app_show_function "$@"
  local home="$1"
  echo "$MAIN_VERSION" >"${home}/${MAIN_PATH_VERSION}"
}

function module_setup() {
  bl64_dbg_app_show_function "$@"
  local home="$1"
  local module=''

  for module in $MAIN_MODULE_LIST_BASE; do
    # shellcheck disable=SC1090
    bl64_check_file "${MAIN_PATH_LIB}/${module}.bash" &&
      source "${MAIN_PATH_LIB}/${module}.bash" &&
      "sysden64_${module}_setup" "$home" ||
      return $?
  done
  for module in $MAIN_MODULE_LIST_TOOLS; do
    # shellcheck disable=SC1090
    bl64_check_file "${MAIN_PATH_LIB}/${module}.bash" &&
      source "${MAIN_PATH_LIB}/${module}.bash" &&
      "sysden64_${module}_setup" "$home" ||
      return $?
  done
}

function devbin64_setup() {
  bl64_dbg_app_show_function "$@"
  local home="$1"
  local repository="$2"
  local profile="$3"

  bl64_msg_show_phase 'prepare DevBin64'
  bl64_msg_show_task "source environment (${repository} - ${profile})"
  DEV_PROFILE="$profile"
  unset DEV_PATH_ROOT
  # shellcheck disable=SC1090
  cd "$repository" &&
    source "$MAIN_CMD_DEVBIN64_SET" ||
    return $?

  bl64_msg_show_task "create/update profile (${profile})"
  "./$MAIN_CMD_DEVBIN64_PROFILE" ||
    return $?

  # shellcheck disable=SC2154
  bl64_fs_symlink_create \
    "${DEV_PATH_PROF_LOGS}" \
    "${home}/logs" &&
    bl64_fs_symlink_create \
      "${DEV_PATH_PROF_VAULT}" \
      "${home}/vault" &&
    bl64_fs_symlink_create \
      "${DEV_PATH_PROF_TMP}" \
      "${home}/tmp" &&
    bl64_fs_symlink_create \
      "${DEV_PATH_PROF_ETC}" \
      "${home}/etc" &&
    bl64_fs_symlink_create \
      "${DEV_PATH_PROF_VAR}" \
      "${home}/var" &&
    bl64_fs_symlink_create \
      "${DEV_PATH_DOCS}" \
      "${home}/docs" &&
    bl64_fs_symlink_create \
      "${DEV_PATH_SRC}" \
      "${home}/src"
}

function xdg_setup() {
  bl64_dbg_app_show_function "$@"
  local home="$1"
  bl64_msg_show_phase 'prepare XDG'
  bl64_iam_xdg_create \
    "$home"
}

function deploy_home() {
  bl64_dbg_app_show_function "$@"
  local home="$1"
  local repository="$2"
  local profile="$3"

  xdg_setup "$home" ||
    return $?

  if bl64_lib_flag_is_enabled "$MAIN_USE_DEVBIN64"; then
    devbin64_setup "$home" "$repository" "$profile" ||
      return $?
  fi
  module_setup "$home" &&
    version_register "$home"
}

function deploy_sysden() {
  bl64_dbg_app_show_function "$@"
  local repository="$1"

  # shellcheck disable=SC2059
  bl64_fs_dir_create \
    "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" \
    "$repository" &&
    cd "$repository" &&
    printf "$MAIN_MODULE_DEVBIN64" >"${repository}/${MAIN_FILE_DEVBIN64_MODULE}" &&
    "$MAIN_CMD_DEVBIN64_BOOTSTRAP" &&
    "$MAIN_CMD_DEVBIN64_SYSDEN64"
}

#######################################
# Initialize environment
#
# Arguments:
#   None
# Outputs:
#   Initializacion progress messages
# Returns:
#   0: initialization ok
#   >: failed to initialize
#######################################
function initialize() {
  bl64_dbg_app_show_function "@"
  local command="$1"
  local repository="$2"

  bl64_check_parameter 'command' ||
    { bl64_msg_help_show && return 1; }

  if [[ "$command" == 'deploy_home' ]]; then
    if bl64_lib_flag_is_enabled "$MAIN_USE_DEVBIN64"; then
      bl64_check_parameter 'repository' &&
        bl64_check_directory "$repository" &&
        bl64_check_file "${repository}/${MAIN_CMD_DEVBIN64_SET}" &&
        bl64_check_file "${repository}/${MAIN_CMD_DEVBIN64_PROFILE}" ||
        return $?
    fi
  elif [[ "$command" == 'deploy_sysden' ]]; then
    bl64_check_parameter 'repository' &&
      bl64_check_command "$MAIN_CMD_DEVBIN64_BOOTSTRAP" ||
      return $?
    if [[ -d "$repository" ]]; then
      bl64_msg_show_error "target directory must not exist (${repository})"
      # shellcheck disable=SC2086
      return $BL64_LIB_ERROR_TASK_FAILED
    fi
  fi
  bl64_check_directory "$MAIN_PATH_ETC" &&
    bl64_check_directory "$MAIN_PATH_LIB"
}

#
# Main
#

declare MAIN_COMMAND=''
declare MAIN_DEBUG="$BL64_DBG_TARGET_NONE"
declare MAIN_OPTION=''
declare MAIN_VERBOSE="$BL64_MSG_VERBOSE_APP"
declare MAIN_HOME="$HOME"
declare MAIN_REPOSITORY="$BL64_VAR_DEFAULT"
declare MAIN_USE_DEVBIN64="$BL64_VAR_OFF"
declare MAIN_PROFILE='default'
bl64_lib_script_version_set '4.3.0'
bl64_msg_help_usage_set '<-l|-c> [-o Home] [-i Repo] [-p Profile] [-d] [-V Verbose] [-D Debug] [-h]'
bl64_msg_help_about_set 'SysDen64 is an opinionated portable working environment for the DevOps/SRE/CloudAdmin/SysAdmin nomad'
# shellcheck disable=SC2016
bl64_msg_help_parameters_set \
  '-l         : Deploy configuration files to home directory
-c         : Create SysDen64 repository
-d         : Use SysDen64 repository for persistense
-h         : Show help
-o Home    : Full path to the user home directory. Default: $HOME
-i Repo    : SysDen64 repository path. Required for -d and -c
-p Profile : SysDen64 DEV_PROFILE. Required for -d. Default: default
-V Verbose : Set verbosity level. Format: one of BL64_MSG_VERBOSE_*
-D Debug   : Enable debugging mode. Format: one of BL64_DBG_TARGET_*'

while getopts ':cldo:i:p:V:D:h' MAIN_OPTION; do
  case "$MAIN_OPTION" in
  l) MAIN_COMMAND='deploy_home' ;;
  c) MAIN_COMMAND='deploy_sysden' ;;
  d) MAIN_USE_DEVBIN64="$BL64_VAR_ON" ;;
  o) MAIN_HOME="$OPTARG" ;;
  i) MAIN_REPOSITORY="$OPTARG" ;;
  p) MAIN_PROFILE="$OPTARG" ;;
  V) MAIN_VERBOSE="$OPTARG" ;;
  D) MAIN_DEBUG="$OPTARG" ;;
  h) bl64_msg_help_show && exit 0 ;;
  *) bl64_msg_help_show && exit 1 ;;
  esac
done
bl64_dbg_set_level "$MAIN_DEBUG" && bl64_msg_set_level "$MAIN_VERBOSE" && initialize "$MAIN_COMMAND" "$MAIN_REPOSITORY" || exit $?

bl64_msg_show_batch_start "$MAIN_COMMAND"
case "$MAIN_COMMAND" in
'deploy_home') deploy_home "$MAIN_HOME" "$MAIN_REPOSITORY" "$MAIN_PROFILE" ;;
'deploy_sysden') deploy_sysden "$MAIN_REPOSITORY" ;;
*) bl64_check_alert_parameter_invalid "$MAIN_COMMAND" ;;
esac
bl64_msg_show_batch_finish $? "$MAIN_COMMAND"
