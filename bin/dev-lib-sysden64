#!/usr/bin/env bash
#######################################
# Dev / Lib / SysDen64 / Prepare sysden64's home directory
#
# * Version: 2.2.0
#
#######################################
# Copyright [2023] [serdigital64@gmail.com]
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#######################################

#
# Imports
#

# shellcheck source=bin/dev-set
source ./bin/dev-set || { echo 'dev-set:Error: unable to load dev environment' 2>&1 && exit 1; }
# shellcheck source-path=bin
source ./bin/dev-env-sysden64 || exit 1
# shellcheck source-path=lib/bl64
source "${DEV_LIB_BASHLIB64_TARGET}/bashlib64-module-api.bash" &&
  source "${DEV_LIB_BASHLIB64_TARGET}/bashlib64-module-xsv.bash" &&
  source "${DEV_LIB_BASHLIB64_TARGET}/bashlib64-module-bsh.bash" &&
  source "${DEV_LIB_BASHLIB64_TARGET}/bashlib64-module-vcs.bash" &&
  source "${DEV_LIB_BASHLIB64_TARGET}/bashlib64-module-rxtx.bash" &&
  source "${DEV_LIB_BASHLIB64_TARGET}/bashlib64-module-fmt.bash" &&
  source "${DEV_LIB_BASHLIB64_TARGET}/bashlib64-module-txt.bash" &&
  source "${DEV_LIB_BASHLIB64_TARGET}/bashlib64-module-fs.bash" &&
  source "${DEV_LIB_BASHLIB64_TARGET}/bashlib64-core.bash" || exit 1

#
# Functions
#

function dev_lib_xdg_setup() {
  bl64_dbg_app_show_function "$@"
  local home="$1"
  local xdg_config="${home}/.config"
  local xdg_cache="${home}/.cache"
  local xdg_local="${home}/.local"

  bl64_msg_show_phase 'prepare XDG'
  bl64_fs_create_dir "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" \
    "$xdg_config" \
    "$xdg_local" \
    "$xdg_cache" \
    "${xdg_local}/bin" \
    "${xdg_local}/lib" \
    "${xdg_local}/share" \
    "${xdg_local}/state"
}

function dev_lib_starship_setup() {
  bl64_dbg_app_show_function "$@"
  local home="$1"
  local profile="${home}/.bash_profile"
  local config="${home}/.config"

  bl64_msg_show_phase 'prepare Starship'
  bl64_check_file "$profile" ||
    return $?

  bl64_msg_show_task "Enable Starship (${profile})"
  ! bl64_bsh_command_is_executable 'starship' &&
    bl64_msg_show_warning 'unable to find tool in the search path. No further action taken' && return 0

  if ! bl64_txt_run_egrep "$BL64_TXT_SET_GREP_QUIET" 'starship init bash' "$profile"; then
    printf \
      '\neval "$(starship init bash)"\n' \
      >>"$profile"
  fi

  bl64_msg_show_task "Setup Starship (${config})"
  bl64_fs_copy_files \
    "$BL64_VAR_DEFAULT" \
    "$BL64_VAR_DEFAULT" \
    "$BL64_VAR_DEFAULT" \
    "${config}" \
    "${DEV_LAB_SYSDEN64_PATH_ETC}/starship/.config/starship.toml"
}

function dev_lib_bash_setup() {
  bl64_dbg_app_show_function "$@"
  local home="$1"
  local user_bashrc_d="${home}/.bashrc.d"

  bl64_msg_show_phase 'prepare Bash'

  bl64_msg_show_task "Create modular bashr store (${user_bashrc_d})"
  bl64_fs_create_dir "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" \
    "$user_bashrc_d" ||
    return $?

  bl64_msg_show_task "Setup user's bash profile (${home})"
  bl64_fs_copy_files \
    '0700' \
    "$BL64_VAR_DEFAULT" \
    "$BL64_VAR_DEFAULT" \
    "$home" \
    "${DEV_LAB_SYSDEN64_PATH_ETC}/bash/.bashrc" \
    "${DEV_LAB_SYSDEN64_PATH_ETC}/bash/.bash_profile"
}

function dev_lib_zsh_setup() {
  bl64_dbg_app_show_function "$@"
  local home="$1"
  bl64_msg_show_phase 'prepare ZSH'
  bl64_fs_copy_files \
    "$BL64_VAR_DEFAULT" \
    "$BL64_VAR_DEFAULT" \
    "$BL64_VAR_DEFAULT" \
    "$home" \
    "${DEV_LAB_SYSDEN64_PATH_ETC}/zsh/.zshrc"
}

function dev_lib_p10k_setup() {
  bl64_dbg_app_show_function "$@"
  local home="$1"
  local profile="${home}/.zshrc"

  bl64_msg_show_phase 'prepare PowerLevel10K'
  bl64_msg_show_task "enable PowerLevel10K (${profile})"
  if ! bl64_txt_run_egrep "$BL64_TXT_SET_GREP_QUIET" 'powerlevel10k/powerlevel10k' "$profile"; then
    "$BL64_OS_CMD_CAT" \
      "${DEV_LAB_SYSDEN64_PATH_ETC}/powerlevel10k/p10k.snippet" >>"$profile"
  fi

  bl64_msg_show_task 'setup PowerLevel10K'
  # shellcheck disable=SC2086
  bl64_fs_copy_files \
    "$BL64_VAR_DEFAULT" \
    "$BL64_VAR_DEFAULT" \
    "$BL64_VAR_DEFAULT" \
    "$home" \
    "${DEV_LAB_SYSDEN64_PATH_ETC}/powerlevel10k/.p10k.zsh"
}
function dev_lib_omz_setup() {
  bl64_dbg_app_show_function "$@"
  local home="$1"
  local omz_path="${home}/.oh-my-zsh"
  local profile="${home}/.zshrc"

  bl64_msg_show_phase 'prepare Oh-My-ZSH'
  bl64_msg_show_task "enable Oh-My-ZSH (${profile})"
  if ! bl64_txt_run_egrep "$BL64_TXT_SET_GREP_QUIET" '/oh-my-zsh.sh' "$profile"; then
    "$BL64_OS_CMD_CAT" \
      "${DEV_LAB_SYSDEN64_PATH_ETC}/oh-my-zsh/oh-my-zsh.snippet" >>"$profile"
  fi

  bl64_msg_show_task "download Oh-My-ZSH (${omz_path})"
  bl64_rxtx_git_get_dir \
    "$DEV_LIB_SYSDEN64_GIT_OMZ" \
    '.' \
    "$omz_path" \
    "$BL64_VAR_ON" \
    'master' ||
    return $?

  dev_lib_omz_setup_plugins "$home"
}

function dev_lib_omz_setup_plugins() {
  bl64_dbg_app_show_function "$@"
  local home="$1"
  local omz_custom_path="${home}/.oh-my-zsh/custom"
  local omz_custom_plugins_path="${omz_custom_path}/plugins"
  local omz_custom_themes_path="${omz_custom_path}/themes"

  bl64_msg_show_task "download plugins (${omz_custom_plugins_path})"
  bl64_fs_create_dir "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" \
    "$omz_custom_plugins_path" &&
    cd "$omz_custom_plugins_path" ||
    return $?
  for plugin in $DEV_LIB_SYSDEN64_GIT_ZSH_PLUGINS; do
    bl64_vcs_run_git \
      clone \
      --depth 1 \
      --single-branch \
      "$plugin" ||
      return $?
  done

  bl64_msg_show_task "download themes (${omz_custom_themes_path})"
  [[ -d "$omz_custom_themes_path" ]] && bl64_fs_rm_full "$omz_custom_themes_path"
  bl64_fs_create_dir "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" \
    "$omz_custom_themes_path" &&
    cd "$omz_custom_themes_path" ||
    return $?
  for plugin in $DEV_LIB_SYSDEN64_GIT_ZSH_THEMES; do
    bl64_vcs_run_git \
      clone \
      --depth 1 \
      --single-branch \
      "$plugin" ||
      return $?
  done
}

function dev_lib_mc_setup() {
  bl64_dbg_app_show_function "$@"
  local home="$1"
  local target="${home}/.config/mc"

  bl64_msg_show_phase 'prepare MC'
  bl64_msg_show_task "setup MC (${target})"
  # shellcheck disable=SC2086
  bl64_fs_run_cp \
    $BL64_FS_SET_CP_RECURSIVE \
    $BL64_FS_SET_CP_FORCE \
    "${DEV_LAB_SYSDEN64_PATH_ETC}/mc/.config/mc" \
    "${home}/.config"
}

function dev_lib_btop_setup() {
  bl64_dbg_app_show_function "$@"
  local home="$1"
  local target="${home}/.config/btop"

  bl64_msg_show_phase 'prepare BTop'
  bl64_msg_show_task "setup BTop (${target})"
  # shellcheck disable=SC2086
  bl64_fs_run_cp \
    $BL64_FS_SET_CP_RECURSIVE \
    $BL64_FS_SET_CP_FORCE \
    "${DEV_LAB_SYSDEN64_PATH_ETC}/btop/.config/btop" \
    "${home}/.config"
}

function dev_lib_tmux_setup() {
  bl64_dbg_app_show_function "$@"
  local home="$1"
  local plugins_path="${home}/.tmux/plugins"

  bl64_msg_show_phase 'prepare TMUX'
  bl64_fs_copy_files \
    "$BL64_VAR_DEFAULT" \
    "$BL64_VAR_DEFAULT" \
    "$BL64_VAR_DEFAULT" \
    "$home" \
    "${DEV_LAB_SYSDEN64_PATH_ETC}/tmux/.tmux.conf" ||
    return $?

  [[ -d "$plugins_path" ]] && return 0
  bl64_msg_show_task "download plugins (${plugins_path})"
  bl64_fs_create_dir "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" \
    "${home}/.tmux" \
    "$plugins_path" &&
    cd "$plugins_path" ||
    return $?
  for plugin in $DEV_LIB_SYSDEN64_GIT_TMUX_PLUGINS; do
    bl64_vcs_run_git \
      clone \
      --depth 1 \
      --single-branch \
      "$plugin" ||
      return $?
  done
}

function dev_lib_nvim_setup() {
  bl64_dbg_app_show_function "$@"
  local home="$1"
  local target="${home}/.config/nvim"

  bl64_msg_show_phase 'prepare NVIM'
  bl64_msg_show_task "setup NVIM (${target})"
  bl64_fs_create_dir "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" \
    "$target" ||
    return $?

  [[ -f "${target}/.neoconf.json" ]] && return 0
  bl64_rxtx_git_get_dir \
    "$DEV_LIB_SYSDEN64_GIT_LAZYVIM" \
    '.' \
    "$target" \
    "$BL64_VAR_ON"
}

function dev_lib_ansible_setup() {
  bl64_dbg_app_show_function "$@"
  local home="$1"

  bl64_msg_show_phase 'prepare Ansible'
  bl64_fs_copy_files \
    "$BL64_VAR_DEFAULT" \
    "$BL64_VAR_DEFAULT" \
    "$BL64_VAR_DEFAULT" \
    "$home" \
    "${DEV_LAB_SYSDEN64_PATH_ETC}/ansible/.ansible.cfg"
}

function dev_lib_alacritty_setup() {
  bl64_dbg_app_show_function "$@"
  local home="$1"

  bl64_msg_show_phase 'prepare Alacritty'
  # shellcheck disable=SC2086
  bl64_fs_run_cp \
    $BL64_FS_SET_CP_RECURSIVE \
    $BL64_FS_SET_CP_FORCE \
    "${DEV_LAB_SYSDEN64_PATH_ETC}/alacritty/.alacritty.yml" \
    "$home"
}

function dev_lib_keepassx_setup() {
  bl64_dbg_app_show_function "$@"
  local home="$1"
  local target="${home}/.config/keepassx"

  bl64_msg_show_phase 'prepare KeePassX'
  bl64_msg_show_task "setup KeePassX (${target})"
  [[ -d "$target" ]] && bl64_msg_show_warning 'already configured. No further action taken' && return 0
  # shellcheck disable=SC2086
  bl64_fs_run_cp \
    $BL64_FS_SET_CP_RECURSIVE \
    $BL64_FS_SET_CP_FORCE \
    "${DEV_LAB_SYSDEN64_PATH_ETC}/keepassx/.config/keepassx" \
    "${home}/.config"
}

function dev_lib_ssh_setup() {
  bl64_dbg_app_show_function "$@"
  local home="$1"
  local vault_enabled="$2"
  local target="${home}/.ssh"
  local vault="${DEV_LAB_SYSDEN64_PATH_VAULT}/ssh"

  bl64_msg_show_phase 'prepare OpenSSH'
  bl64_msg_show_task "setup OpenSSH (${target})"
  if bl64_lib_flag_is_enabled "$vault_enabled"; then
    bl64_fs_create_dir "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" \
      "$vault" &&
      bl64_fs_run_ln \
        -s \
        "${DEV_LAB_SYSDEN64_PATH_VAULT}/ssh" \
        "$target" ||
      return $?
    target="$vault"
  fi
  [[ -f "${target}/config" ]] &&
    bl64_msg_show_warning 'already configured. No further action taken' &&
    return 0
  bl64_fs_copy_files \
    "$BL64_VAR_DEFAULT" \
    "$BL64_VAR_DEFAULT" \
    "$BL64_VAR_DEFAULT" \
    "$target" \
    "${DEV_LAB_SYSDEN64_PATH_ETC}/ssh/.ssh/config"
}

function dev_lib_kubectl_setup() {
  bl64_dbg_app_show_function "$@"
  local home="$1"
  local vault_enabled="$2"
  local target="${home}/.kube"
  local vault="${DEV_LAB_SYSDEN64_PATH_VAULT}/kubectl"

  bl64_msg_show_phase 'prepare KubeCTL'
  bl64_msg_show_task "setup KubeCTL (${target})"
  if bl64_lib_flag_is_enabled "$vault_enabled"; then
    bl64_fs_create_dir "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" \
      "$vault" &&
      bl64_fs_run_ln \
        -s \
        "${DEV_LAB_SYSDEN64_PATH_VAULT}/kubectl" \
        "$target" ||
      return $?
    target="$vault"
  fi
  [[ -f "${target}/config" ]] &&
    bl64_msg_show_warning 'already configured. No further action taken' &&
    return 0
  bl64_fs_copy_files \
    "$BL64_VAR_DEFAULT" \
    "$BL64_VAR_DEFAULT" \
    "$BL64_VAR_DEFAULT" \
    "$target" \
    "${DEV_LAB_SYSDEN64_PATH_ETC}/kubectl/.kube/config"
}

function dev_lib_gcloud_setup() {
  bl64_dbg_app_show_function "$@"
  local home="$1"
  local vault_enabled="$2"
  local target="${home}/.config/gcloud"
  local vault="${DEV_LAB_SYSDEN64_PATH_VAULT}/gcloud"

  bl64_msg_show_phase 'prepare GCloud CLI'
  bl64_msg_show_task "setup GCloud CLI (${target})"
  if bl64_lib_flag_is_enabled "$vault_enabled"; then
    bl64_fs_create_dir "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" \
      "$vault" \
      "${vault}/configurations" &&
      bl64_fs_run_ln \
        -s \
        "${DEV_LAB_SYSDEN64_PATH_VAULT}/gcloud" \
        "$target" ||
      return $?
    target="$vault"
  fi
  [[ -f "${target}/configurations/config_default" ]] &&
    bl64_msg_show_warning 'already configured. No further action taken' &&
    return 0
  bl64_fs_copy_files \
    "$BL64_VAR_DEFAULT" \
    "$BL64_VAR_DEFAULT" \
    "$BL64_VAR_DEFAULT" \
    "${target}/configurations" \
    "${DEV_LAB_SYSDEN64_PATH_ETC}/gcloud/.config/gcloud/configurations/config_default"
}

function dev_lib_awscli_setup() {
  bl64_dbg_app_show_function "$@"
  local home="$1"
  local vault_enabled="$2"
  local target="${home}/.aws"
  local vault="${DEV_LAB_SYSDEN64_PATH_VAULT}/aws"

  bl64_msg_show_phase 'prepare AWS CLI'
  bl64_msg_show_task "setup AWS CLI (${target})"
  if bl64_lib_flag_is_enabled "$vault_enabled"; then
    bl64_fs_create_dir "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" \
      "$vault" &&
      bl64_fs_run_ln \
        -s \
        "${DEV_LAB_SYSDEN64_PATH_VAULT}/aws" \
        "$target" ||
      return $?
    target="$vault"
  fi
  [[ -f "${target}/config" ]] &&
    bl64_msg_show_warning 'already configured. No further action taken' &&
    return 0
  bl64_fs_copy_files \
    "$BL64_VAR_DEFAULT" \
    "$BL64_VAR_DEFAULT" \
    "$BL64_VAR_DEFAULT" \
    "$target" \
    "${DEV_LAB_SYSDEN64_PATH_ETC}/aws/.aws/config"
}

function dev_lib_home_populate() {
  bl64_dbg_app_show_function "$@"
  local home="$1"
  local vault_enabled="$2"

  dev_lib_xdg_setup "$home" &&
    dev_lib_bash_setup "$home" &&
    dev_lib_starship_setup "$home" &&
    dev_lib_zsh_setup "$home" &&
    dev_lib_p10k_setup "$home" &&
    dev_lib_omz_setup "$home" &&
    dev_lib_mc_setup "$home" &&
    dev_lib_btop_setup "$home" &&
    dev_lib_ansible_setup "$home" &&
    dev_lib_tmux_setup "$home" &&
    dev_lib_nvim_setup "$home" &&
    dev_lib_alacritty_setup "$home" &&
    dev_lib_keepassx_setup "$home" &&
    dev_lib_ssh_setup "$home" "$vault_enabled" &&
    dev_lib_kubectl_setup "$home" "$vault_enabled" &&
    dev_lib_gcloud_setup "$home" "$vault_enabled" &&
    dev_lib_awscli_setup "$home" "$vault_enabled"
}

function dev_lib_initialize() {
  bl64_dbg_app_show_function
  "$BL64_FS_CMD_TOUCH" "$setup_marker"
}

#
# Main
#

declare dev_lib_home="${1:-${HOME}}"
declare dev_lib_vault_enabled="${1:-YES}"
declare setup_marker="${HOME}/.sysden64"

[[ -n "$DEV_CICD_DEBUG" ]] && bl64_dbg_all_enable
bl64_msg_all_enable_verbose

bl64_msg_show_batch_start 'dev-lib-sysden64'
if [[ -f "$setup_marker" ]]; then
  bl64_msg_show_warning "SysDen64 already deployed to current user's home (${dev_lib_home}). No further action taken"
else
  dev_lib_initialize &&
    dev_lib_home_populate "$dev_lib_home" "$dev_lib_vault_enabled"
fi
bl64_msg_show_batch_finish $? 'dev-lib-sysden64'
