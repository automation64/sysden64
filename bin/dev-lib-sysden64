#!/usr/bin/env bash
#######################################
# Dev / Lib / SysDen64 / Prepare sysden64's home directory
#
# * Version: 2.0.0
#
#######################################
# Copyright [2023] [serdigital64@gmail.com]
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#######################################

#
# Imports
#

# shellcheck source=bin/dev-set
source ./bin/dev-set || { echo 'dev-set:Error: unable to load dev environment' 2>&1 && exit 1; }
# shellcheck source-path=bin
source ./bin/dev-env-sysden64 || exit 1
# shellcheck source-path=lib/bl64
source "${DEV_LIB_BASHLIB64_TARGET}/bashlib64-module-api.bash" &&
  source "${DEV_LIB_BASHLIB64_TARGET}/bashlib64-module-vcs.bash" &&
  source "${DEV_LIB_BASHLIB64_TARGET}/bashlib64-module-rxtx.bash" &&
  source "${DEV_LIB_BASHLIB64_TARGET}/bashlib64-module-fmt.bash" &&
  source "${DEV_LIB_BASHLIB64_TARGET}/bashlib64-module-txt.bash" &&
  source "${DEV_LIB_BASHLIB64_TARGET}/bashlib64-module-fs.bash" &&
  source "${DEV_LIB_BASHLIB64_TARGET}/bashlib64-core.bash" || exit 1

#
# Functions
#

function dev_lib_home_xdg_setup() {
  bl64_dbg_app_show_function "$@"
  local user_home="$1"
  local xdg_config="${user_home}/.config"
  local xdg_cache="${user_home}/.cache"
  local xdg_local="${user_home}/.local"

  bl64_msg_show_task 'setup XDG'
  bl64_fs_create_dir "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" \
    "$xdg_config" \
    "$xdg_local" \
    "$xdg_cache" \
    "${xdg_local}/bin" \
    "${xdg_local}/lib" \
    "${xdg_local}/share" \
    "${xdg_local}/state"
}

function dev_lib_home_create() {
  bl64_dbg_app_show_function "$@"
  local home="$1"
  bl64_msg_show_task 'create SysDen64 home'
  bl64_fs_create_dir \
    "$BL64_VAR_DEFAULT" \
    "$BL64_VAR_DEFAULT" \
    "$BL64_VAR_DEFAULT" \
    "$home"
}

function dev_lib_home_zsh_setup() {
  bl64_dbg_app_show_function "$@"
  local home="$1"
  local omz_path="${home}/.oh-my-zsh"
  local omz_custom_path="${home}/.oh-my-zsh/custom"
  local omz_custom_plugins_path="${omz_custom_path}/plugins"
  local omz_custom_themes_path="${omz_custom_path}/themes"
  local plugin=''

  [[ -d "$omz_path" ]] && bl64_msg_show_warning 'already configured. No further action taken' && return 0

  bl64_msg_show_task 'setup ZSH'
  # shellcheck disable=SC2086
  bl64_fs_copy_files \
    "$BL64_VAR_DEFAULT" \
    "$BL64_VAR_DEFAULT" \
    "$BL64_VAR_DEFAULT" \
    "$home" \
    "${DEV_ENV_SYSDEN64_LOCAL_PATH_ETC}/zsh/.zshrc" \
    "${DEV_ENV_SYSDEN64_LOCAL_PATH_ETC}/zsh/.p10k.zsh" ||
    return $?

  bl64_msg_show_task "download Oh-My-ZSH (${omz_path})"
  bl64_rxtx_git_get_dir \
    "$DEV_LIB_SYSDEN64_GIT_OMZ" \
    '.' \
    "$omz_path" \
    "$BL64_VAR_ON" \
    'master' ||
    return $?

  bl64_msg_show_task "download plugins (${omz_custom_plugins_path})"
  bl64_fs_create_dir "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" \
    "$omz_custom_plugins_path" &&
    cd "$omz_custom_plugins_path" ||
    return $?
  for plugin in $DEV_LIB_SYSDEN64_GIT_ZSH_PLUGINS; do
    bl64_vcs_run_git \
      clone \
      --depth 1 \
      --single-branch \
      "$plugin" ||
      return $?
  done

  bl64_msg_show_task "download themes (${omz_custom_themes_path})"
  [[ -d "$omz_custom_themes_path" ]] && bl64_fs_rm_full "$omz_custom_themes_path"
  bl64_fs_create_dir "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" \
    "$omz_custom_themes_path" &&
    cd "$omz_custom_themes_path" ||
    return $?
  for plugin in $DEV_LIB_SYSDEN64_GIT_ZSH_THEMES; do
    bl64_vcs_run_git \
      clone \
      --depth 1 \
      --single-branch \
      "$plugin" ||
      return $?
  done
}

function dev_lib_home_ssh_setup() {
  bl64_dbg_app_show_function "$@"
  local home="$1"
  local target="${home}/.ssh"
  bl64_msg_show_task "setup OpenSSH (${target})"
  [[ -L "$target" ]] && bl64_msg_show_warning 'already configured. No further action taken' && return 0
  bl64_fs_create_dir "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" \
    "${DEV_ENV_SYSDEN64_LOCAL_PATH_VAULT}/ssh" &&
    bl64_fs_run_ln \
      -s \
      "${DEV_LAB_SYSDEN64_CONTAINER_PATH_VAULT}/ssh" \
      "$target"
}

function dev_lib_home_kubectl_setup() {
  bl64_dbg_app_show_function "$@"
  local home="$1"
  local target="${home}/.kube"
  bl64_msg_show_task "setup KubeCTL (${target})"
  [[ -L "$target" ]] && bl64_msg_show_warning 'already configured. No further action taken' && return 0
  bl64_fs_create_dir "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" \
    "${DEV_ENV_SYSDEN64_LOCAL_PATH_VAULT}/kubectl" &&
    bl64_fs_run_ln \
      -s \
      "${DEV_LAB_SYSDEN64_CONTAINER_PATH_VAULT}/kubectl" \
      "$target"
}

function dev_lib_home_awscli_setup() {
  bl64_dbg_app_show_function "$@"
  local home="$1"
  local target="${home}/.aws"
  bl64_msg_show_task "setup AWS CLI (${target})"
  [[ -L "$target" ]] && bl64_msg_show_warning 'already configured. No further action taken' && return 0
  bl64_fs_create_dir "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" \
    "${DEV_ENV_SYSDEN64_LOCAL_PATH_VAULT}/aws" &&
    bl64_fs_run_ln \
      -s \
      "${DEV_LAB_SYSDEN64_CONTAINER_PATH_VAULT}/aws" \
      "$target"
}

function dev_lib_home_mc_setup() {
  bl64_dbg_app_show_function "$@"
  local home="$1"
  local target="${home}/.config/mc"
  bl64_msg_show_task "setup MC (${target})"
  [[ -d "$target" ]] && bl64_msg_show_warning 'already configured. No further action taken' && return 0
  # shellcheck disable=SC2086
  bl64_fs_run_cp \
    $BL64_FS_SET_CP_RECURSIVE \
    $BL64_FS_SET_CP_FORCE \
    "${DEV_ENV_SYSDEN64_LOCAL_PATH_ETC}/mc/.config/mc" \
    "${home}/.config"
}

function dev_lib_home_btop_setup() {
  bl64_dbg_app_show_function "$@"
  local home="$1"
  local target="${home}/.config/btop"
  bl64_msg_show_task "setup BTop (${target})"
  [[ -d "$target" ]] && bl64_msg_show_warning 'already configured. No further action taken' && return 0
  # shellcheck disable=SC2086
  bl64_fs_run_cp \
    $BL64_FS_SET_CP_RECURSIVE \
    $BL64_FS_SET_CP_FORCE \
    "${DEV_ENV_SYSDEN64_LOCAL_PATH_ETC}/btop/.config/btop" \
    "${home}/.config"
}

function dev_lib_paths_create() {
  bl64_dbg_app_show_function
  bl64_msg_show_task 'create base paths'
  bl64_fs_create_dir "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" \
    "$DEV_ENV_SYSDEN64_LOCAL_PATH_VAULT" \
    "$DEV_ENV_SYSDEN64_LOCAL_PATH_LOGS" \
    "$DEV_ENV_SYSDEN64_LOCAL_PATH_TMP"
}

function dev_lib_home_populate() {
  bl64_dbg_app_show_function "$@"
  local home="$1"
  dev_lib_home_create "$home" &&
    dev_lib_home_xdg_setup "$home" &&
    dev_lib_home_zsh_setup "$home" &&
    dev_lib_home_mc_setup "$home" &&
    dev_lib_home_btop_setup "$home" &&
    dev_lib_home_ssh_setup "$home" &&
    dev_lib_home_kubectl_setup "$home" &&
    dev_lib_home_awscli_setup "$home"
}

function dev_lib_initialize() {
  bl64_dbg_app_show_function
}

#
# Main
#

declare dev_lib_home="${1:-${DEV_ENV_SYSDEN64_LOCAL_PATH_HOME}}"

[[ -n "$DEV_CICD_DEBUG" ]] && bl64_dbg_all_enable
bl64_msg_all_enable_verbose

bl64_msg_show_batch_start 'dev-lib-sysden64'
dev_lib_initialize &&
  dev_lib_paths_create &&
  dev_lib_home_populate "$dev_lib_home"
bl64_msg_show_batch_finish $? 'dev-lib-sysden64'
