#!/usr/bin/env bash
#######################################
# Dev / Lib / SysDen64 / Prepare sysden64's apps
#
# * Library only. Called by dev-lib-sysden64-home
# * Version: 2.0.0
#
#######################################
# Copyright [2023] [serdigital64@gmail.com]
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#######################################

#
# Functions
#

function dev_lib_mc_setup() {
  bl64_dbg_app_show_function "$@"
  local home="$1"
  local target="${home}/.config/mc"
  local model="${DEV_LAB_SYSDEN64_PATH_MODEL}/mc"

  bl64_msg_show_phase 'prepare MC'
  ! bl64_bsh_command_is_executable 'mc' &&
    bl64_msg_show_warning 'tool not detected. No further action taken' && return 0

  bl64_msg_show_task "setup MC (${target})"
  # shellcheck disable=SC2086
  bl64_fs_run_cp \
    $BL64_FS_SET_CP_RECURSIVE \
    $BL64_FS_SET_CP_FORCE \
    "${model}/.config/mc" \
    "${home}/.config"
}

function dev_lib_lnav_setup() {
  bl64_dbg_app_show_function "$@"
  local home="$1"
  local target="${home}/.config/lnav"
  local model="${DEV_LAB_SYSDEN64_PATH_MODEL}/lnav"

  bl64_msg_show_phase 'prepare LNAV'
  ! bl64_bsh_command_is_executable 'lnav' &&
    bl64_msg_show_warning 'tool not detected. No further action taken' && return 0

  bl64_msg_show_task "setup LNAV (${target})"
  [[ -d "$target" ]] && bl64_msg_show_warning 'already configured. No further action taken' && return 0
  # shellcheck disable=SC2086
  bl64_fs_run_cp \
    $BL64_FS_SET_CP_RECURSIVE \
    $BL64_FS_SET_CP_FORCE \
    "${model}/.config/lnav" \
    "${home}/.config"
}

function dev_lib_btop_setup() {
  bl64_dbg_app_show_function "$@"
  local home="$1"
  local target="${home}/.config/btop"
  local model="${DEV_LAB_SYSDEN64_PATH_MODEL}/btop"

  bl64_msg_show_phase 'prepare BTop'
  ! bl64_bsh_command_is_executable 'btop' &&
    bl64_msg_show_warning 'tool not detected. No further action taken' && return 0

  bl64_msg_show_task "setup BTop (${target})"
  # shellcheck disable=SC2086
  bl64_fs_run_cp \
    $BL64_FS_SET_CP_RECURSIVE \
    $BL64_FS_SET_CP_FORCE \
    "${model}/.config/btop" \
    "${home}/.config"
}

function dev_lib_tmux_setup() {
  bl64_dbg_app_show_function "$@"
  local home="$1"
  local plugins_path="${home}/.tmux/plugins"
  local model="${DEV_LAB_SYSDEN64_PATH_MODEL}/tmux"

  bl64_msg_show_phase 'prepare TMUX'
  ! bl64_bsh_command_is_executable 'tmux' &&
    bl64_msg_show_warning 'tool not detected. No further action taken' && return 0

  bl64_fs_copy_files \
    "$BL64_VAR_DEFAULT" \
    "$BL64_VAR_DEFAULT" \
    "$BL64_VAR_DEFAULT" \
    "$home" \
    "${model}/.tmux.conf" ||
    return $?

  [[ -d "$plugins_path" ]] && return 0
  bl64_msg_show_task "deploy plugins (${plugins_path})"
  bl64_fs_create_dir "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" \
    "${home}/.tmux" ||
    return $?
  for plugin in $DEV_LIB_SYSDEN64_GIT_TMUX_PLUGINS; do
    bl64_vcs_git_clone \
      "$plugin" \
      "$plugins_path" ||
      return $?
  done
}

function dev_lib_nvim_setup() {
  bl64_dbg_app_show_function "$@"
  local home="$1"
  local target="${home}/.config/nvim"
  local model="${DEV_LAB_SYSDEN64_PATH_MODEL}/nvim"

  bl64_msg_show_phase 'prepare NVIM'
  ! bl64_bsh_command_is_executable 'nvim' &&
    bl64_msg_show_warning 'tool not detected. No further action taken' && return 0

  bl64_msg_show_task "setup NVIM (${target})"
  # shellcheck disable=SC2086
  bl64_fs_run_cp \
    $BL64_FS_SET_CP_RECURSIVE \
    $BL64_FS_SET_CP_FORCE \
    "${model}/.config/nvim" \
    "${home}/.config"
}

function dev_lib_ansible_setup() {
  bl64_dbg_app_show_function "$@"
  local home="$1"
  local model="${DEV_LAB_SYSDEN64_PATH_MODEL}/ansible"

  bl64_msg_show_phase 'prepare Ansible'
  bl64_fs_copy_files \
    "$BL64_VAR_DEFAULT" \
    "$BL64_VAR_DEFAULT" \
    "$BL64_VAR_DEFAULT" \
    "$home" \
    "${model}/.ansible.cfg"
}

function dev_lib_github_setup() {
  bl64_dbg_app_show_function "$@"
  local home="$1"
  local model="${DEV_LAB_SYSDEN64_PATH_MODEL}/github"

  bl64_msg_show_phase 'prepare GitHub'
  bl64_fs_copy_files \
    "$BL64_VAR_DEFAULT" \
    "$BL64_VAR_DEFAULT" \
    "$BL64_VAR_DEFAULT" \
    "${home}/${DEV_LAB_SYSDEN64_BASE_ENVS}" \
    "${model}/${DEV_LAB_SYSDEN64_BASE_ENVS}"/*.env
}

function dev_lib_git_setup() {
  bl64_dbg_app_show_function "$@"
  local home="$1"
  local model="${DEV_LAB_SYSDEN64_PATH_MODEL}/git"

  bl64_msg_show_phase 'prepare GIT'
  bl64_fs_copy_files \
    "$BL64_VAR_DEFAULT" \
    "$BL64_VAR_DEFAULT" \
    "$BL64_VAR_DEFAULT" \
    "$home" \
    "${model}/.gitconfig" &&
    bl64_fs_copy_files \
      "$BL64_VAR_DEFAULT" \
      "$BL64_VAR_DEFAULT" \
      "$BL64_VAR_DEFAULT" \
      "${home}/${DEV_LAB_SYSDEN64_BASE_ENVS}" \
      "${model}/${DEV_LAB_SYSDEN64_BASE_ENVS}"/*.env
}

function dev_lib_alacritty_setup() {
  bl64_dbg_app_show_function "$@"
  local home="$1"
  local model="${DEV_LAB_SYSDEN64_PATH_MODEL}/alacritty"

  bl64_msg_show_phase 'prepare Alacritty'
  ! bl64_bsh_command_is_executable 'alacritty' &&
    bl64_msg_show_warning 'tool not detected. No further action taken' && return 0

  # shellcheck disable=SC2086
  bl64_fs_run_cp \
    $BL64_FS_SET_CP_RECURSIVE \
    $BL64_FS_SET_CP_FORCE \
    "${model}/.alacritty.yml" \
    "$home"
}

function dev_lib_keepassx_setup() {
  bl64_dbg_app_show_function "$@"
  local home="$1"
  local target="${home}/.config/keepassx"
  local model="${DEV_LAB_SYSDEN64_PATH_MODEL}/keepassx"

  bl64_msg_show_phase 'prepare KeePassX'
  bl64_msg_show_task "setup KeePassX (${target})"
  [[ -d "$target" ]] && bl64_msg_show_warning 'already configured. No further action taken' && return 0
  # shellcheck disable=SC2086
  bl64_fs_run_cp \
    $BL64_FS_SET_CP_RECURSIVE \
    $BL64_FS_SET_CP_FORCE \
    "${model}/.config/keepassx" \
    "${home}/.config"
}

function dev_lib_ssh_setup() {
  bl64_dbg_app_show_function "$@"
  local home="$1"
  local persistence="$2"
  local target="${home}/.ssh"
  local vault="${DEV_PATH_PROF_VAULT}/ssh"
  local model="${DEV_LAB_SYSDEN64_PATH_MODEL}/ssh"

  bl64_msg_show_phase 'prepare OpenSSH'
  bl64_msg_show_task "setup OpenSSH (${target})"
  if bl64_lib_flag_is_enabled "$persistence"; then
    bl64_fs_create_dir "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" \
      "$vault" &&
      bl64_fs_create_symlink \
        "$vault" \
        "$target" ||
      return $?
    target="$vault"
  else
    bl64_fs_create_dir "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" \
      "$target" ||
      return $?
  fi
  [[ -f "${target}/config" ]] &&
    bl64_msg_show_warning 'already configured. No further action taken' &&
    return 0
  bl64_fs_copy_files \
    "$BL64_VAR_DEFAULT" \
    "$BL64_VAR_DEFAULT" \
    "$BL64_VAR_DEFAULT" \
    "$target" \
    "${model}/.ssh/config"
}

function dev_lib_kubectl_setup() {
  bl64_dbg_app_show_function "$@"
  local home="$1"
  local persistence="$2"
  local target="${home}/.kube"
  local vault="${DEV_PATH_PROF_VAULT}/kubectl"
  local model="${DEV_LAB_SYSDEN64_PATH_MODEL}/kubectl"

  bl64_msg_show_phase 'prepare KubeCTL'
  bl64_msg_show_task "setup KubeCTL (${target})"
  if bl64_lib_flag_is_enabled "$persistence"; then
    bl64_fs_create_dir "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" \
      "$vault" &&
      bl64_fs_create_symlink \
        "$vault" \
        "$target" ||
      return $?
    target="$vault"
  else
    bl64_fs_create_dir "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" \
      "$target" ||
      return $?
  fi
  [[ -f "${target}/config" ]] &&
    bl64_msg_show_warning 'already configured. No further action taken' &&
    return 0
  bl64_fs_copy_files \
    "$BL64_VAR_DEFAULT" \
    "$BL64_VAR_DEFAULT" \
    "$BL64_VAR_DEFAULT" \
    "$target" \
    "${model}/.kube/config"
}

function dev_lib_gcloud_setup() {
  bl64_dbg_app_show_function "$@"
  local home="$1"
  local persistence="$2"
  local target="${home}/.config/gcloud"
  local vault="${DEV_PATH_PROF_VAULT}/gcloud"
  local model="${DEV_LAB_SYSDEN64_PATH_MODEL}/gcloud"

  bl64_msg_show_phase 'prepare GCloud CLI'
  bl64_msg_show_task "setup GCloud CLI (${target})"
  if bl64_lib_flag_is_enabled "$persistence"; then
    bl64_fs_create_dir "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" \
      "$vault" \
      "${vault}/configurations" &&
      bl64_fs_create_symlink \
        "$vault" \
        "$target" ||
      return $?
    target="$vault"
  else
    bl64_fs_create_dir "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" \
      "$target" \
      "${target}/configurations" ||
      return $?
  fi
  [[ -f "${target}/configurations/config_default" ]] &&
    bl64_msg_show_warning 'already configured. No further action taken' &&
    return 0
  bl64_fs_copy_files \
    "$BL64_VAR_DEFAULT" \
    "$BL64_VAR_DEFAULT" \
    "$BL64_VAR_DEFAULT" \
    "${target}/configurations" \
    "${model}/.config/gcloud/configurations/config_default"
}

function dev_lib_awscli_setup() {
  bl64_dbg_app_show_function "$@"
  local home="$1"
  local persistence="$2"
  local target="${home}/.aws"
  local vault="${DEV_PATH_PROF_VAULT}/aws"
  local model="${DEV_LAB_SYSDEN64_PATH_MODEL}/aws"

  bl64_msg_show_phase 'prepare AWS CLI'
  bl64_msg_show_task "setup AWS CLI (${target})"
  if bl64_lib_flag_is_enabled "$persistence"; then
    bl64_fs_create_dir "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" \
      "$vault" &&
      bl64_fs_create_symlink \
        "$vault" \
        "$target" ||
      return $?
    target="$vault"
  else
    bl64_fs_create_dir "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" \
      "$target" ||
      return $?
  fi
  [[ -f "${target}/config" ]] &&
    bl64_msg_show_warning 'already configured. No further action taken' &&
    return 0
  bl64_fs_copy_files \
    "$BL64_VAR_DEFAULT" \
    "$BL64_VAR_DEFAULT" \
    "$BL64_VAR_DEFAULT" \
    "$target" \
    "${model}/.aws/config" &&
    bl64_fs_copy_files \
      "$BL64_VAR_DEFAULT" \
      "$BL64_VAR_DEFAULT" \
      "$BL64_VAR_DEFAULT" \
      "${home}/${DEV_LAB_SYSDEN64_BASE_ENVS}" \
      "${model}/${DEV_LAB_SYSDEN64_BASE_ENVS}"/*.env
}

function dev_lib_docker_setup() {
  bl64_dbg_app_show_function "$@"
  local home="$1"
  local persistence="$2"
  local target="${home}/.docker"
  local vault="${DEV_PATH_PROF_VAULT}/docker"
  local model="${DEV_LAB_SYSDEN64_PATH_MODEL}/docker"

  bl64_msg_show_phase 'prepare Docker CLI'
  bl64_msg_show_task "setup Docker CLI (${target})"
  if bl64_lib_flag_is_enabled "$persistence"; then
    bl64_fs_create_dir "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" \
      "$vault" &&
      bl64_fs_create_symlink \
        "$vault" \
        "$target" ||
      return $?
    target="$vault"
  else
    bl64_fs_create_dir "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" \
      "$target" ||
      return $?
  fi
  [[ -f "${target}/config.json" ]] &&
    bl64_msg_show_warning 'already configured. No further action taken' &&
    return 0
  bl64_fs_copy_files \
    "$BL64_VAR_DEFAULT" \
    "$BL64_VAR_DEFAULT" \
    "$BL64_VAR_DEFAULT" \
    "$target" \
    "${model}/.docker/config.json"
}

function dev_lib_gpg_setup() {
  bl64_dbg_app_show_function "$@"
  local home="$1"
  local persistence="$2"
  local target="${home}/.gnupg"
  local vault="${DEV_PATH_PROF_VAULT}/gnupg"

  bl64_msg_show_phase 'prepare GNUPG'
  bl64_msg_show_task "setup GNUPG (${target})"
  if bl64_lib_flag_is_enabled "$persistence"; then
    bl64_fs_create_dir "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" \
      "$vault" &&
      bl64_fs_create_symlink \
        "$vault" \
        "$target"
  else
    bl64_fs_create_dir "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" "$BL64_VAR_DEFAULT" \
      "$target" ||
      return $?
  fi
}

function dev_lib_apps_populate() {
  bl64_dbg_app_show_function "$@"
  local home="$1"
  local persistence="$2"

  dev_lib_alacritty_setup "$home" &&
    dev_lib_ansible_setup "$home" &&
    dev_lib_btop_setup "$home" &&
    dev_lib_keepassx_setup "$home" &&
    dev_lib_lnav_setup "$home" &&
    dev_lib_mc_setup "$home" &&
    dev_lib_git_setup "$home" &&
    dev_lib_github_setup "$home" &&
    dev_lib_nvim_setup "$home" &&
    dev_lib_tmux_setup "$home" &&
    dev_lib_awscli_setup "$home" "$persistence" &&
    dev_lib_gcloud_setup "$home" "$persistence" &&
    dev_lib_gpg_setup "$home" "$persistence" &&
    dev_lib_kubectl_setup "$home" "$persistence" &&
    dev_lib_docker_setup "$home" "$persistence" &&
    dev_lib_ssh_setup "$home" "$persistence"
}
