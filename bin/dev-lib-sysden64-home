#!/usr/bin/env bash
#######################################
# Dev / Lib / SysDen64 / Prepare sysden64's home directory
#
# * Version: 3.1.0
#
#######################################
# Copyright [2023] [serdigital64@gmail.com]
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#######################################

#
# Imports
#

# shellcheck source=bin/dev-set
source ./bin/dev-set || { echo 'dev-set:Error: unable to load dev environment' 2>&1 && exit 1; }
# shellcheck source-path=bin
source ./bin/dev-lib-sysden64-apps &&
  source ./bin/dev-env-sysden64 || exit 1
# shellcheck source-path=lib/bl64
source "${DEV_LIB_BASHLIB64_TARGET}/bashlib64-module-api.bash" &&
  source "${DEV_LIB_BASHLIB64_TARGET}/bashlib64-module-xsv.bash" &&
  source "${DEV_LIB_BASHLIB64_TARGET}/bashlib64-module-bsh.bash" &&
  source "${DEV_LIB_BASHLIB64_TARGET}/bashlib64-module-vcs.bash" &&
  source "${DEV_LIB_BASHLIB64_TARGET}/bashlib64-module-rxtx.bash" &&
  source "${DEV_LIB_BASHLIB64_TARGET}/bashlib64-module-fmt.bash" &&
  source "${DEV_LIB_BASHLIB64_TARGET}/bashlib64-module-txt.bash" &&
  source "${DEV_LIB_BASHLIB64_TARGET}/bashlib64-module-fs.bash" &&
  source "${DEV_LIB_BASHLIB64_TARGET}/bashlib64-module-rnd.bash" &&
  source "${DEV_LIB_BASHLIB64_TARGET}/bashlib64-module-iam.bash" &&
  source "${DEV_LIB_BASHLIB64_TARGET}/bashlib64-core.bash" || exit 1

#
# Functions
#

function dev_lib_sysden64_setup() {
  bl64_dbg_app_show_function "$@"
  local home="$1"
  local persistence="$2"

  bl64_msg_show_phase 'prepare SysDen64'
  bl64_lib_flag_is_enabled "$persistence" || return 0

  bl64_fs_create_symlink \
    "${DEV_PATH_PROF_LOGS}" \
    "${home}/logs" &&
    bl64_fs_create_symlink \
      "${DEV_PATH_PROF_VAULT}" \
      "${home}/vault" &&
    bl64_fs_create_symlink \
      "${DEV_PATH_PROF_TMP}" \
      "${home}/tmp" &&
    bl64_fs_create_symlink \
      "${DEV_PATH_PROF_ETC}" \
      "${home}/etc" &&
    bl64_fs_create_symlink \
      "${DEV_PATH_PROF_VAR}" \
      "${home}/var" &&
    bl64_fs_create_symlink \
      "${DEV_PATH_DOCS}" \
      "${home}/docs" &&
    bl64_fs_create_symlink \
      "${DEV_PATH_SRC}" \
      "${home}/src"
}

function dev_lib_xdg_setup() {
  bl64_dbg_app_show_function "$@"
  local home="$1"
  bl64_msg_show_phase 'prepare XDG'
  bl64_iam_xdg_create \
    "$home"
}

function dev_lib_env_setup() {
  bl64_dbg_app_show_function "$@"
  local home="$1"
  local model="${DEV_LAB_SYSDEN64_PATH_MODEL}/env"

  bl64_msg_show_task "Populate modular env store  (${DEV_LAB_SYSDEN64_PATH_ENVS})"
  # shellcheck disable=SC2086
  bl64_fs_run_cp \
    $BL64_FS_SET_CP_RECURSIVE \
    $BL64_FS_SET_CP_FORCE \
    "${model}/${DEV_LAB_SYSDEN64_BASE_ENVS}" \
    "$home"
}

function dev_lib_bash_setup() {
  bl64_dbg_app_show_function "$@"
  local home="$1"
  local model="${DEV_LAB_SYSDEN64_PATH_MODEL}/bash"

  bl64_msg_show_phase 'prepare Bash'
  ! bl64_bsh_command_is_executable 'bash' &&
    bl64_msg_show_warning 'tool not detected. No further action taken' && return 0

  bl64_msg_show_task "Setup user's bash profile (${home})"
  bl64_fs_copy_files \
    '0700' \
    "$BL64_VAR_DEFAULT" \
    "$BL64_VAR_DEFAULT" \
    "$home" \
    "${model}/.bashrc" \
    "${model}/.bash_profile"
}

function dev_lib_zsh_setup() {
  bl64_dbg_app_show_function "$@"
  local home="$1"
  local model="${DEV_LAB_SYSDEN64_PATH_MODEL}/zsh"

  bl64_msg_show_phase 'prepare ZSH'
  ! bl64_bsh_command_is_executable 'zsh' &&
    bl64_msg_show_warning 'tool not detected. No further action taken' && return 0

  bl64_fs_copy_files \
    "$BL64_VAR_DEFAULT" \
    "$BL64_VAR_DEFAULT" \
    "$BL64_VAR_DEFAULT" \
    "$home" \
    "${model}/.zshrc"
}

function dev_lib_p10k_setup() {
  bl64_dbg_app_show_function "$@"
  local home="$1"
  local profile="${home}/.zshrc"
  local model="${DEV_LAB_SYSDEN64_PATH_MODEL}/powerlevel10k"

  bl64_msg_show_phase 'prepare PowerLevel10K'
  ! bl64_bsh_command_is_executable 'zsh' &&
    bl64_msg_show_warning 'tool not detected. No further action taken' && return 0

  bl64_msg_show_task "enable PowerLevel10K (${profile})"
  if ! bl64_txt_run_egrep "$BL64_TXT_SET_GREP_QUIET" '# PowerLevel10K' "$profile"; then
    "$BL64_OS_CMD_CAT" \
      "${model}/p10k.snippet" >>"$profile"
  fi

  bl64_msg_show_task 'setup PowerLevel10K'
  # shellcheck disable=SC2086
  bl64_fs_copy_files \
    "$BL64_VAR_DEFAULT" \
    "$BL64_VAR_DEFAULT" \
    "$BL64_VAR_DEFAULT" \
    "$home" \
    "${model}/.p10k.zsh"
}

function dev_lib_omz_setup() {
  bl64_dbg_app_show_function "$@"
  local home="$1"
  local omz_path="${home}/.oh-my-zsh"
  local profile="${home}/.zshrc"
  local model="${DEV_LAB_SYSDEN64_PATH_MODEL}/oh-my-zsh"

  bl64_msg_show_phase 'prepare Oh-My-ZSH'
  ! bl64_bsh_command_is_executable 'zsh' &&
    bl64_msg_show_warning 'tool not detected. No further action taken' && return 0

  bl64_msg_show_task "enable Oh-My-ZSH (${profile})"
  if ! bl64_txt_run_egrep "$BL64_TXT_SET_GREP_QUIET" '/oh-my-zsh.sh' "$profile"; then
    "$BL64_OS_CMD_CAT" \
      "${model}/oh-my-zsh.snippet" >>"$profile"
  fi

  bl64_msg_show_task "download Oh-My-ZSH (${omz_path})"
  bl64_vcs_git_clone \
    "$DEV_LIB_SYSDEN64_GIT_OMZ" \
    "$HOME" \
    'master' \
    '.oh-my-zsh' ||
    return $?

  dev_lib_omz_setup_plugins "$home"
}

function dev_lib_omz_setup_plugins() {
  bl64_dbg_app_show_function "$@"
  local home="$1"
  local omz_custom_path="${home}/.oh-my-zsh/custom"
  local omz_custom_plugins_path="${omz_custom_path}/plugins"
  local omz_custom_themes_path="${omz_custom_path}/themes"

  bl64_msg_show_task "download plugins (${omz_custom_plugins_path})"
  for plugin in $DEV_LIB_SYSDEN64_GIT_ZSH_PLUGINS; do
    bl64_vcs_git_clone \
      "$plugin" \
      "$omz_custom_plugins_path" ||
      return $?
  done

  bl64_msg_show_task "download themes (${omz_custom_themes_path})"
  [[ -d "$omz_custom_themes_path" ]] && bl64_fs_rm_full "$omz_custom_themes_path"
  for plugin in $DEV_LIB_SYSDEN64_GIT_ZSH_THEMES; do
    bl64_vcs_git_clone \
      "$plugin" \
      "$omz_custom_themes_path" ||
      return $?
  done
}

function dev_lib_starship_setup() {
  bl64_dbg_app_show_function "$@"
  local home="$1"
  local profile="${home}/.bash_profile"
  local config="${home}/.config"

  bl64_msg_show_phase 'prepare Starship'
  bl64_check_file "$profile" ||
    return $?

  bl64_msg_show_task "Enable Starship (${profile})"
  ! bl64_bsh_command_is_executable 'starship' &&
    bl64_msg_show_warning 'tool not detected. No further action taken' && return 0

  if ! bl64_txt_run_egrep "$BL64_TXT_SET_GREP_QUIET" 'starship init bash' "$profile"; then
    printf \
      '\neval "$(starship init bash)"\n' \
      >>"$profile"
  fi

  bl64_msg_show_task "Setup Starship (${config})"
  bl64_fs_copy_files \
    "$BL64_VAR_DEFAULT" \
    "$BL64_VAR_DEFAULT" \
    "$BL64_VAR_DEFAULT" \
    "${config}" \
    "${DEV_LAB_SYSDEN64_PATH_MODEL}/starship/.config/starship.toml"
}

function dev_lib_home_populate() {
  bl64_dbg_app_show_function "$@"
  local home="$1"
  local persistence="$2"

  dev_lib_xdg_setup "$home" &&
    dev_lib_sysden64_setup "$home" "$persistence" &&
    dev_lib_env_setup "$home" &&
    dev_lib_bash_setup "$home" &&
    dev_lib_starship_setup "$home" &&
    dev_lib_zsh_setup "$home" &&
    dev_lib_omz_setup "$home" &&
    dev_lib_p10k_setup "$home" ||
    return $?
}

function dev_lib_initialize() {
  bl64_dbg_app_show_function
  PATH="${PATH}:/usr/local/bin"
}

#
# Main
#

# Lib / SysDen64 / Full path to user's home
declare dev_lib_home="${1:-$HOME}"
# Lib / SysDen64 / Use persistent storage? (YES/NO)
declare dev_lib_persistence="${2:-YES}"

[[ -n "$DEV_CICD_DEBUG" ]] && bl64_dbg_all_enable
bl64_msg_all_enable_verbose

bl64_msg_show_batch_start 'dev-lib-sysden64'
if ! bl64_lib_flag_is_enabled "$DEV_LIB_SYSDEN64_REPLACE_ENABLED" && [[ -f "${HOME}/${DEV_LAB_SYSDEN64_PROFILE}" ]]; then
  bl64_msg_show_warning "SysDen64 already deployed to current user's home (${dev_lib_home}). No further action taken"
else
  dev_lib_initialize &&
    dev_lib_home_populate "$dev_lib_home" "$dev_lib_persistence" &&
    dev_lib_apps_populate "$dev_lib_home" "$dev_lib_persistence" &&
    printf '%s\n' "$DEV_PROFILE" >"${HOME}/${DEV_LAB_SYSDEN64_PROFILE}"
fi
bl64_msg_show_batch_finish $? 'dev-lib-sysden64-home'
